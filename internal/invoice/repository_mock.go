// Code generated by mockery v2.14.1. DO NOT EDIT.

package invoice

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	unitofwork "github.com/tauki/invoiceexchange/internal/unitofwork"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateInvoice provides a mock function with given fields: ctx, inv, opts
func (_m *MockRepository) CreateInvoice(ctx context.Context, inv *Invoice, opts ...unitofwork.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, inv)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Invoice, ...unitofwork.Option) error); ok {
		r0 = rf(ctx, inv, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInvoice provides a mock function with given fields: ctx, id, opts
func (_m *MockRepository) DeleteInvoice(ctx context.Context, id uuid.UUID, opts ...unitofwork.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...unitofwork.Option) error); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInvoiceByID provides a mock function with given fields: ctx, id, opts
func (_m *MockRepository) GetInvoiceByID(ctx context.Context, id uuid.UUID, opts ...unitofwork.Option) (*Invoice, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *Invoice
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...unitofwork.Option) *Invoice); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, ...unitofwork.Option) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceItems provides a mock function with given fields: ctx, invoiceID
func (_m *MockRepository) GetInvoiceItems(ctx context.Context, invoiceID uuid.UUID) ([]*Item, error) {
	ret := _m.Called(ctx, invoiceID)

	var r0 []*Item
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*Item); ok {
		r0 = rf(ctx, invoiceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, invoiceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvoices provides a mock function with given fields: ctx
func (_m *MockRepository) ListInvoices(ctx context.Context) ([]*Invoice, error) {
	ret := _m.Called(ctx)

	var r0 []*Invoice
	if rf, ok := ret.Get(0).(func(context.Context) []*Invoice); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvoice provides a mock function with given fields: ctx, inv, opts
func (_m *MockRepository) UpdateInvoice(ctx context.Context, inv *Invoice, opts ...unitofwork.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, inv)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Invoice, ...unitofwork.Option) error); ok {
		r0 = rf(ctx, inv, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
