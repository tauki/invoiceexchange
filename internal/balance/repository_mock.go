// Code generated by mockery v2.14.1. DO NOT EDIT.

package balance

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	unitofwork "github.com/tauki/invoiceexchange/internal/unitofwork"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateBalance provides a mock function with given fields: ctx, _a1, opts
func (_m *MockRepository) CreateBalance(ctx context.Context, _a1 *Balance, opts ...unitofwork.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Balance, ...unitofwork.Option) error); ok {
		r0 = rf(ctx, _a1, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalance provides a mock function with given fields: ctx, entityID, opts
func (_m *MockRepository) GetBalance(ctx context.Context, entityID uuid.UUID, opts ...unitofwork.Option) (*Balance, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, entityID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *Balance
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...unitofwork.Option) *Balance); ok {
		r0 = rf(ctx, entityID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Balance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, ...unitofwork.Option) error); ok {
		r1 = rf(ctx, entityID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalance provides a mock function with given fields: ctx, _a1, opts
func (_m *MockRepository) UpdateBalance(ctx context.Context, _a1 *Balance, opts ...unitofwork.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Balance, ...unitofwork.Option) error); ok {
		r0 = rf(ctx, _a1, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
