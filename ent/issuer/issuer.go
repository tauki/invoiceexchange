// Code generated by ent, DO NOT EDIT.

package issuer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the issuer type in the database.
	Label = "issuer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldJoinedAt holds the string denoting the joined_at field in the database.
	FieldJoinedAt = "joined_at"
	// EdgeInvoices holds the string denoting the invoices edge name in mutations.
	EdgeInvoices = "invoices"
	// EdgeBalance holds the string denoting the balance edge name in mutations.
	EdgeBalance = "balance"
	// Table holds the table name of the issuer in the database.
	Table = "issuers"
	// InvoicesTable is the table that holds the invoices relation/edge.
	InvoicesTable = "invoices"
	// InvoicesInverseTable is the table name for the Invoice entity.
	// It exists in this package in order to avoid circular dependency with the "invoice" package.
	InvoicesInverseTable = "invoices"
	// InvoicesColumn is the table column denoting the invoices relation/edge.
	InvoicesColumn = "issuer_invoices"
	// BalanceTable is the table that holds the balance relation/edge.
	BalanceTable = "issuers"
	// BalanceInverseTable is the table name for the Balance entity.
	// It exists in this package in order to avoid circular dependency with the "balance" package.
	BalanceInverseTable = "balances"
	// BalanceColumn is the table column denoting the balance relation/edge.
	BalanceColumn = "issuer_balance"
)

// Columns holds all SQL columns for issuer fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldJoinedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "issuers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"issuer_balance",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultJoinedAt holds the default value on creation for the "joined_at" field.
	DefaultJoinedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Issuer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByJoinedAt orders the results by the joined_at field.
func ByJoinedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJoinedAt, opts...).ToFunc()
}

// ByInvoicesCount orders the results by invoices count.
func ByInvoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvoicesStep(), opts...)
	}
}

// ByInvoices orders the results by invoices terms.
func ByInvoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBalanceField orders the results by balance field.
func ByBalanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBalanceStep(), sql.OrderByField(field, opts...))
	}
}
func newInvoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvoicesTable, InvoicesColumn),
	)
}
func newBalanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BalanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BalanceTable, BalanceColumn),
	)
}
