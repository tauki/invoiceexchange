// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/invoice"
	"github.com/tauki/invoiceexchange/ent/issuer"
)

// Invoice is the model entity for the Invoice schema.
type Invoice struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status invoice.Status `json:"status,omitempty"`
	// AskingPrice holds the value of the "asking_price" field.
	AskingPrice float64 `json:"asking_price,omitempty"`
	// IsLocked holds the value of the "is_locked" field.
	IsLocked bool `json:"is_locked,omitempty"`
	// IsApproved holds the value of the "is_approved" field.
	IsApproved bool `json:"is_approved,omitempty"`
	// InvoiceNumber holds the value of the "invoice_number" field.
	InvoiceNumber string `json:"invoice_number,omitempty"`
	// InvoiceDate holds the value of the "invoice_date" field.
	InvoiceDate time.Time `json:"invoice_date,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate time.Time `json:"due_date,omitempty"`
	// AmountDue holds the value of the "amount_due" field.
	AmountDue float64 `json:"amount_due,omitempty"`
	// CustomerName holds the value of the "customer_name" field.
	CustomerName string `json:"customer_name,omitempty"`
	// Reference holds the value of the "reference" field.
	Reference string `json:"reference,omitempty"`
	// CompanyName holds the value of the "company_name" field.
	CompanyName string `json:"company_name,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// TotalAmount holds the value of the "total_amount" field.
	TotalAmount float64 `json:"total_amount,omitempty"`
	// TotalVat holds the value of the "total_vat" field.
	TotalVat float64 `json:"total_vat,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvoiceQuery when eager-loading is set.
	Edges           InvoiceEdges `json:"edges"`
	issuer_invoices *uuid.UUID
	selectValues    sql.SelectValues
}

// InvoiceEdges holds the relations/edges for other nodes in the graph.
type InvoiceEdges struct {
	// Items holds the value of the items edge.
	Items []*InvoiceItem `json:"items,omitempty"`
	// Bids holds the value of the bids edge.
	Bids []*Bid `json:"bids,omitempty"`
	// Issuer holds the value of the issuer edge.
	Issuer *Issuer `json:"issuer,omitempty"`
	// Investor holds the value of the investor edge.
	Investor []*Investor `json:"investor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) ItemsOrErr() ([]*InvoiceItem, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// BidsOrErr returns the Bids value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) BidsOrErr() ([]*Bid, error) {
	if e.loadedTypes[1] {
		return e.Bids, nil
	}
	return nil, &NotLoadedError{edge: "bids"}
}

// IssuerOrErr returns the Issuer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceEdges) IssuerOrErr() (*Issuer, error) {
	if e.loadedTypes[2] {
		if e.Issuer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: issuer.Label}
		}
		return e.Issuer, nil
	}
	return nil, &NotLoadedError{edge: "issuer"}
}

// InvestorOrErr returns the Investor value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) InvestorOrErr() ([]*Investor, error) {
	if e.loadedTypes[3] {
		return e.Investor, nil
	}
	return nil, &NotLoadedError{edge: "investor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoice.FieldIsLocked, invoice.FieldIsApproved:
			values[i] = new(sql.NullBool)
		case invoice.FieldAskingPrice, invoice.FieldAmountDue, invoice.FieldTotalAmount, invoice.FieldTotalVat:
			values[i] = new(sql.NullFloat64)
		case invoice.FieldStatus, invoice.FieldInvoiceNumber, invoice.FieldCustomerName, invoice.FieldReference, invoice.FieldCompanyName, invoice.FieldCurrency:
			values[i] = new(sql.NullString)
		case invoice.FieldInvoiceDate, invoice.FieldDueDate, invoice.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case invoice.FieldID:
			values[i] = new(uuid.UUID)
		case invoice.ForeignKeys[0]: // issuer_invoices
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invoice fields.
func (i *Invoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invoice.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case invoice.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = invoice.Status(value.String)
			}
		case invoice.FieldAskingPrice:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field asking_price", values[j])
			} else if value.Valid {
				i.AskingPrice = value.Float64
			}
		case invoice.FieldIsLocked:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_locked", values[j])
			} else if value.Valid {
				i.IsLocked = value.Bool
			}
		case invoice.FieldIsApproved:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_approved", values[j])
			} else if value.Valid {
				i.IsApproved = value.Bool
			}
		case invoice.FieldInvoiceNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_number", values[j])
			} else if value.Valid {
				i.InvoiceNumber = value.String
			}
		case invoice.FieldInvoiceDate:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_date", values[j])
			} else if value.Valid {
				i.InvoiceDate = value.Time
			}
		case invoice.FieldDueDate:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[j])
			} else if value.Valid {
				i.DueDate = value.Time
			}
		case invoice.FieldAmountDue:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_due", values[j])
			} else if value.Valid {
				i.AmountDue = value.Float64
			}
		case invoice.FieldCustomerName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_name", values[j])
			} else if value.Valid {
				i.CustomerName = value.String
			}
		case invoice.FieldReference:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference", values[j])
			} else if value.Valid {
				i.Reference = value.String
			}
		case invoice.FieldCompanyName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_name", values[j])
			} else if value.Valid {
				i.CompanyName = value.String
			}
		case invoice.FieldCurrency:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[j])
			} else if value.Valid {
				i.Currency = value.String
			}
		case invoice.FieldTotalAmount:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[j])
			} else if value.Valid {
				i.TotalAmount = value.Float64
			}
		case invoice.FieldTotalVat:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_vat", values[j])
			} else if value.Valid {
				i.TotalVat = value.Float64
			}
		case invoice.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case invoice.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field issuer_invoices", values[j])
			} else if value.Valid {
				i.issuer_invoices = new(uuid.UUID)
				*i.issuer_invoices = *value.S.(*uuid.UUID)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invoice.
// This includes values selected through modifiers, order, etc.
func (i *Invoice) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryItems queries the "items" edge of the Invoice entity.
func (i *Invoice) QueryItems() *InvoiceItemQuery {
	return NewInvoiceClient(i.config).QueryItems(i)
}

// QueryBids queries the "bids" edge of the Invoice entity.
func (i *Invoice) QueryBids() *BidQuery {
	return NewInvoiceClient(i.config).QueryBids(i)
}

// QueryIssuer queries the "issuer" edge of the Invoice entity.
func (i *Invoice) QueryIssuer() *IssuerQuery {
	return NewInvoiceClient(i.config).QueryIssuer(i)
}

// QueryInvestor queries the "investor" edge of the Invoice entity.
func (i *Invoice) QueryInvestor() *InvestorQuery {
	return NewInvoiceClient(i.config).QueryInvestor(i)
}

// Update returns a builder for updating this Invoice.
// Note that you need to call Invoice.Unwrap() before calling this method if this Invoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invoice) Update() *InvoiceUpdateOne {
	return NewInvoiceClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Invoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invoice) Unwrap() *Invoice {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invoice is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invoice) String() string {
	var builder strings.Builder
	builder.WriteString("Invoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", i.Status))
	builder.WriteString(", ")
	builder.WriteString("asking_price=")
	builder.WriteString(fmt.Sprintf("%v", i.AskingPrice))
	builder.WriteString(", ")
	builder.WriteString("is_locked=")
	builder.WriteString(fmt.Sprintf("%v", i.IsLocked))
	builder.WriteString(", ")
	builder.WriteString("is_approved=")
	builder.WriteString(fmt.Sprintf("%v", i.IsApproved))
	builder.WriteString(", ")
	builder.WriteString("invoice_number=")
	builder.WriteString(i.InvoiceNumber)
	builder.WriteString(", ")
	builder.WriteString("invoice_date=")
	builder.WriteString(i.InvoiceDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(i.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("amount_due=")
	builder.WriteString(fmt.Sprintf("%v", i.AmountDue))
	builder.WriteString(", ")
	builder.WriteString("customer_name=")
	builder.WriteString(i.CustomerName)
	builder.WriteString(", ")
	builder.WriteString("reference=")
	builder.WriteString(i.Reference)
	builder.WriteString(", ")
	builder.WriteString("company_name=")
	builder.WriteString(i.CompanyName)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(i.Currency)
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", i.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("total_vat=")
	builder.WriteString(fmt.Sprintf("%v", i.TotalVat))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Invoices is a parsable slice of Invoice.
type Invoices []*Invoice
