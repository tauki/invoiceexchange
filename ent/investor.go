// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/balance"
	"github.com/tauki/invoiceexchange/ent/investor"
)

// Investor is the model entity for the Investor schema.
type Investor struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// JoinedAt holds the value of the "joined_at" field.
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvestorQuery when eager-loading is set.
	Edges            InvestorEdges `json:"edges"`
	investor_balance *uuid.UUID
	selectValues     sql.SelectValues
}

// InvestorEdges holds the relations/edges for other nodes in the graph.
type InvestorEdges struct {
	// Bids holds the value of the bids edge.
	Bids []*Bid `json:"bids,omitempty"`
	// Invoices holds the value of the invoices edge.
	Invoices []*Invoice `json:"invoices,omitempty"`
	// Balance holds the value of the balance edge.
	Balance *Balance `json:"balance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BidsOrErr returns the Bids value or an error if the edge
// was not loaded in eager-loading.
func (e InvestorEdges) BidsOrErr() ([]*Bid, error) {
	if e.loadedTypes[0] {
		return e.Bids, nil
	}
	return nil, &NotLoadedError{edge: "bids"}
}

// InvoicesOrErr returns the Invoices value or an error if the edge
// was not loaded in eager-loading.
func (e InvestorEdges) InvoicesOrErr() ([]*Invoice, error) {
	if e.loadedTypes[1] {
		return e.Invoices, nil
	}
	return nil, &NotLoadedError{edge: "invoices"}
}

// BalanceOrErr returns the Balance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvestorEdges) BalanceOrErr() (*Balance, error) {
	if e.loadedTypes[2] {
		if e.Balance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: balance.Label}
		}
		return e.Balance, nil
	}
	return nil, &NotLoadedError{edge: "balance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Investor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case investor.FieldName:
			values[i] = new(sql.NullString)
		case investor.FieldJoinedAt:
			values[i] = new(sql.NullTime)
		case investor.FieldID:
			values[i] = new(uuid.UUID)
		case investor.ForeignKeys[0]: // investor_balance
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Investor fields.
func (i *Investor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case investor.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case investor.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case investor.FieldJoinedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[j])
			} else if value.Valid {
				i.JoinedAt = value.Time
			}
		case investor.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field investor_balance", values[j])
			} else if value.Valid {
				i.investor_balance = new(uuid.UUID)
				*i.investor_balance = *value.S.(*uuid.UUID)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Investor.
// This includes values selected through modifiers, order, etc.
func (i *Investor) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryBids queries the "bids" edge of the Investor entity.
func (i *Investor) QueryBids() *BidQuery {
	return NewInvestorClient(i.config).QueryBids(i)
}

// QueryInvoices queries the "invoices" edge of the Investor entity.
func (i *Investor) QueryInvoices() *InvoiceQuery {
	return NewInvestorClient(i.config).QueryInvoices(i)
}

// QueryBalance queries the "balance" edge of the Investor entity.
func (i *Investor) QueryBalance() *BalanceQuery {
	return NewInvestorClient(i.config).QueryBalance(i)
}

// Update returns a builder for updating this Investor.
// Note that you need to call Investor.Unwrap() before calling this method if this Investor
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Investor) Update() *InvestorUpdateOne {
	return NewInvestorClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Investor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Investor) Unwrap() *Investor {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Investor is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Investor) String() string {
	var builder strings.Builder
	builder.WriteString("Investor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(i.JoinedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Investors is a parsable slice of Investor.
type Investors []*Investor
