// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/bid"
	"github.com/tauki/invoiceexchange/ent/investor"
	"github.com/tauki/invoiceexchange/ent/invoice"
)

// BidCreate is the builder for creating a Bid entity.
type BidCreate struct {
	config
	mutation *BidMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (bc *BidCreate) SetStatus(b bid.Status) *BidCreate {
	bc.mutation.SetStatus(b)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BidCreate) SetNillableStatus(b *bid.Status) *BidCreate {
	if b != nil {
		bc.SetStatus(*b)
	}
	return bc
}

// SetAmount sets the "amount" field.
func (bc *BidCreate) SetAmount(f float64) *BidCreate {
	bc.mutation.SetAmount(f)
	return bc
}

// SetAcceptedAmount sets the "accepted_amount" field.
func (bc *BidCreate) SetAcceptedAmount(f float64) *BidCreate {
	bc.mutation.SetAcceptedAmount(f)
	return bc
}

// SetNillableAcceptedAmount sets the "accepted_amount" field if the given value is not nil.
func (bc *BidCreate) SetNillableAcceptedAmount(f *float64) *BidCreate {
	if f != nil {
		bc.SetAcceptedAmount(*f)
	}
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BidCreate) SetCreatedAt(t time.Time) *BidCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BidCreate) SetNillableCreatedAt(t *time.Time) *BidCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BidCreate) SetUpdatedAt(t time.Time) *BidCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BidCreate) SetNillableUpdatedAt(t *time.Time) *BidCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BidCreate) SetID(u uuid.UUID) *BidCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BidCreate) SetNillableID(u *uuid.UUID) *BidCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetInvoiceID sets the "invoice" edge to the Invoice entity by ID.
func (bc *BidCreate) SetInvoiceID(id uuid.UUID) *BidCreate {
	bc.mutation.SetInvoiceID(id)
	return bc
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (bc *BidCreate) SetInvoice(i *Invoice) *BidCreate {
	return bc.SetInvoiceID(i.ID)
}

// SetInvestorID sets the "investor" edge to the Investor entity by ID.
func (bc *BidCreate) SetInvestorID(id uuid.UUID) *BidCreate {
	bc.mutation.SetInvestorID(id)
	return bc
}

// SetInvestor sets the "investor" edge to the Investor entity.
func (bc *BidCreate) SetInvestor(i *Investor) *BidCreate {
	return bc.SetInvestorID(i.ID)
}

// Mutation returns the BidMutation object of the builder.
func (bc *BidCreate) Mutation() *BidMutation {
	return bc.mutation
}

// Save creates the Bid in the database.
func (bc *BidCreate) Save(ctx context.Context) (*Bid, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BidCreate) SaveX(ctx context.Context) *Bid {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BidCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BidCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BidCreate) defaults() {
	if _, ok := bc.mutation.Status(); !ok {
		v := bid.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.AcceptedAmount(); !ok {
		v := bid.DefaultAcceptedAmount
		bc.mutation.SetAcceptedAmount(v)
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bid.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bid.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bid.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BidCreate) check() error {
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Bid.status"`)}
	}
	if v, ok := bc.mutation.Status(); ok {
		if err := bid.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bid.status": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Bid.amount"`)}
	}
	if _, ok := bc.mutation.AcceptedAmount(); !ok {
		return &ValidationError{Name: "accepted_amount", err: errors.New(`ent: missing required field "Bid.accepted_amount"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bid.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bid.updated_at"`)}
	}
	if _, ok := bc.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice", err: errors.New(`ent: missing required edge "Bid.invoice"`)}
	}
	if _, ok := bc.mutation.InvestorID(); !ok {
		return &ValidationError{Name: "investor", err: errors.New(`ent: missing required edge "Bid.investor"`)}
	}
	return nil
}

func (bc *BidCreate) sqlSave(ctx context.Context) (*Bid, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BidCreate) createSpec() (*Bid, *sqlgraph.CreateSpec) {
	var (
		_node = &Bid{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bid.Table, sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(bid.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.Amount(); ok {
		_spec.SetField(bid.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := bc.mutation.AcceptedAmount(); ok {
		_spec.SetField(bid.FieldAcceptedAmount, field.TypeFloat64, value)
		_node.AcceptedAmount = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bid.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bid.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bc.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bid.InvoiceTable,
			Columns: []string{bid.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invoice_bids = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.InvestorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bid.InvestorTable,
			Columns: []string{bid.InvestorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.investor_bids = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BidCreateBulk is the builder for creating many Bid entities in bulk.
type BidCreateBulk struct {
	config
	builders []*BidCreate
}

// Save creates the Bid entities in the database.
func (bcb *BidCreateBulk) Save(ctx context.Context) ([]*Bid, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bid, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BidMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BidCreateBulk) SaveX(ctx context.Context) []*Bid {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BidCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BidCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
