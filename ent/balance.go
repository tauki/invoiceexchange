// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/balance"
)

// Balance is the model entity for the Balance schema.
type Balance struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TotalAmount holds the value of the "total_amount" field.
	TotalAmount float64 `json:"total_amount,omitempty"`
	// AvailableAmount holds the value of the "available_amount" field.
	AvailableAmount float64 `json:"available_amount,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID uuid.UUID `json:"entity_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BalanceQuery when eager-loading is set.
	Edges        BalanceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BalanceEdges holds the relations/edges for other nodes in the graph.
type BalanceEdges struct {
	// Investor holds the value of the investor edge.
	Investor []*Investor `json:"investor,omitempty"`
	// Issuer holds the value of the issuer edge.
	Issuer []*Issuer `json:"issuer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InvestorOrErr returns the Investor value or an error if the edge
// was not loaded in eager-loading.
func (e BalanceEdges) InvestorOrErr() ([]*Investor, error) {
	if e.loadedTypes[0] {
		return e.Investor, nil
	}
	return nil, &NotLoadedError{edge: "investor"}
}

// IssuerOrErr returns the Issuer value or an error if the edge
// was not loaded in eager-loading.
func (e BalanceEdges) IssuerOrErr() ([]*Issuer, error) {
	if e.loadedTypes[1] {
		return e.Issuer, nil
	}
	return nil, &NotLoadedError{edge: "issuer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Balance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case balance.FieldTotalAmount, balance.FieldAvailableAmount:
			values[i] = new(sql.NullFloat64)
		case balance.FieldCreatedAt, balance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case balance.FieldID, balance.FieldEntityID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Balance fields.
func (b *Balance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case balance.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case balance.FieldTotalAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[i])
			} else if value.Valid {
				b.TotalAmount = value.Float64
			}
		case balance.FieldAvailableAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field available_amount", values[i])
			} else if value.Valid {
				b.AvailableAmount = value.Float64
			}
		case balance.FieldEntityID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value != nil {
				b.EntityID = *value
			}
		case balance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case balance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Balance.
// This includes values selected through modifiers, order, etc.
func (b *Balance) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryInvestor queries the "investor" edge of the Balance entity.
func (b *Balance) QueryInvestor() *InvestorQuery {
	return NewBalanceClient(b.config).QueryInvestor(b)
}

// QueryIssuer queries the "issuer" edge of the Balance entity.
func (b *Balance) QueryIssuer() *IssuerQuery {
	return NewBalanceClient(b.config).QueryIssuer(b)
}

// Update returns a builder for updating this Balance.
// Note that you need to call Balance.Unwrap() before calling this method if this Balance
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Balance) Update() *BalanceUpdateOne {
	return NewBalanceClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Balance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Balance) Unwrap() *Balance {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Balance is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Balance) String() string {
	var builder strings.Builder
	builder.WriteString("Balance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", b.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("available_amount=")
	builder.WriteString(fmt.Sprintf("%v", b.AvailableAmount))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", b.EntityID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Balances is a parsable slice of Balance.
type Balances []*Balance
