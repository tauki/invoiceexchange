// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/bid"
	"github.com/tauki/invoiceexchange/ent/investor"
	"github.com/tauki/invoiceexchange/ent/invoice"
	"github.com/tauki/invoiceexchange/ent/invoiceitem"
	"github.com/tauki/invoiceexchange/ent/issuer"
	"github.com/tauki/invoiceexchange/ent/predicate"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceMutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iu *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetStatus sets the "status" field.
func (iu *InvoiceUpdate) SetStatus(i invoice.Status) *InvoiceUpdate {
	iu.mutation.SetStatus(i)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableStatus(i *invoice.Status) *InvoiceUpdate {
	if i != nil {
		iu.SetStatus(*i)
	}
	return iu
}

// SetAskingPrice sets the "asking_price" field.
func (iu *InvoiceUpdate) SetAskingPrice(f float64) *InvoiceUpdate {
	iu.mutation.ResetAskingPrice()
	iu.mutation.SetAskingPrice(f)
	return iu
}

// SetNillableAskingPrice sets the "asking_price" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableAskingPrice(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetAskingPrice(*f)
	}
	return iu
}

// AddAskingPrice adds f to the "asking_price" field.
func (iu *InvoiceUpdate) AddAskingPrice(f float64) *InvoiceUpdate {
	iu.mutation.AddAskingPrice(f)
	return iu
}

// SetIsLocked sets the "is_locked" field.
func (iu *InvoiceUpdate) SetIsLocked(b bool) *InvoiceUpdate {
	iu.mutation.SetIsLocked(b)
	return iu
}

// SetNillableIsLocked sets the "is_locked" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableIsLocked(b *bool) *InvoiceUpdate {
	if b != nil {
		iu.SetIsLocked(*b)
	}
	return iu
}

// SetIsApproved sets the "is_approved" field.
func (iu *InvoiceUpdate) SetIsApproved(b bool) *InvoiceUpdate {
	iu.mutation.SetIsApproved(b)
	return iu
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableIsApproved(b *bool) *InvoiceUpdate {
	if b != nil {
		iu.SetIsApproved(*b)
	}
	return iu
}

// SetInvoiceNumber sets the "invoice_number" field.
func (iu *InvoiceUpdate) SetInvoiceNumber(s string) *InvoiceUpdate {
	iu.mutation.SetInvoiceNumber(s)
	return iu
}

// SetInvoiceDate sets the "invoice_date" field.
func (iu *InvoiceUpdate) SetInvoiceDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetInvoiceDate(t)
	return iu
}

// SetDueDate sets the "due_date" field.
func (iu *InvoiceUpdate) SetDueDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetDueDate(t)
	return iu
}

// SetAmountDue sets the "amount_due" field.
func (iu *InvoiceUpdate) SetAmountDue(f float64) *InvoiceUpdate {
	iu.mutation.ResetAmountDue()
	iu.mutation.SetAmountDue(f)
	return iu
}

// AddAmountDue adds f to the "amount_due" field.
func (iu *InvoiceUpdate) AddAmountDue(f float64) *InvoiceUpdate {
	iu.mutation.AddAmountDue(f)
	return iu
}

// SetCustomerName sets the "customer_name" field.
func (iu *InvoiceUpdate) SetCustomerName(s string) *InvoiceUpdate {
	iu.mutation.SetCustomerName(s)
	return iu
}

// SetReference sets the "reference" field.
func (iu *InvoiceUpdate) SetReference(s string) *InvoiceUpdate {
	iu.mutation.SetReference(s)
	return iu
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableReference(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetReference(*s)
	}
	return iu
}

// ClearReference clears the value of the "reference" field.
func (iu *InvoiceUpdate) ClearReference() *InvoiceUpdate {
	iu.mutation.ClearReference()
	return iu
}

// SetCompanyName sets the "company_name" field.
func (iu *InvoiceUpdate) SetCompanyName(s string) *InvoiceUpdate {
	iu.mutation.SetCompanyName(s)
	return iu
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCompanyName(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCompanyName(*s)
	}
	return iu
}

// ClearCompanyName clears the value of the "company_name" field.
func (iu *InvoiceUpdate) ClearCompanyName() *InvoiceUpdate {
	iu.mutation.ClearCompanyName()
	return iu
}

// SetCurrency sets the "currency" field.
func (iu *InvoiceUpdate) SetCurrency(s string) *InvoiceUpdate {
	iu.mutation.SetCurrency(s)
	return iu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCurrency(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCurrency(*s)
	}
	return iu
}

// SetTotalAmount sets the "total_amount" field.
func (iu *InvoiceUpdate) SetTotalAmount(f float64) *InvoiceUpdate {
	iu.mutation.ResetTotalAmount()
	iu.mutation.SetTotalAmount(f)
	return iu
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableTotalAmount(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetTotalAmount(*f)
	}
	return iu
}

// AddTotalAmount adds f to the "total_amount" field.
func (iu *InvoiceUpdate) AddTotalAmount(f float64) *InvoiceUpdate {
	iu.mutation.AddTotalAmount(f)
	return iu
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (iu *InvoiceUpdate) ClearTotalAmount() *InvoiceUpdate {
	iu.mutation.ClearTotalAmount()
	return iu
}

// SetTotalVat sets the "total_vat" field.
func (iu *InvoiceUpdate) SetTotalVat(f float64) *InvoiceUpdate {
	iu.mutation.ResetTotalVat()
	iu.mutation.SetTotalVat(f)
	return iu
}

// SetNillableTotalVat sets the "total_vat" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableTotalVat(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetTotalVat(*f)
	}
	return iu
}

// AddTotalVat adds f to the "total_vat" field.
func (iu *InvoiceUpdate) AddTotalVat(f float64) *InvoiceUpdate {
	iu.mutation.AddTotalVat(f)
	return iu
}

// ClearTotalVat clears the value of the "total_vat" field.
func (iu *InvoiceUpdate) ClearTotalVat() *InvoiceUpdate {
	iu.mutation.ClearTotalVat()
	return iu
}

// AddItemIDs adds the "items" edge to the InvoiceItem entity by IDs.
func (iu *InvoiceUpdate) AddItemIDs(ids ...uuid.UUID) *InvoiceUpdate {
	iu.mutation.AddItemIDs(ids...)
	return iu
}

// AddItems adds the "items" edges to the InvoiceItem entity.
func (iu *InvoiceUpdate) AddItems(i ...*InvoiceItem) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddItemIDs(ids...)
}

// AddBidIDs adds the "bids" edge to the Bid entity by IDs.
func (iu *InvoiceUpdate) AddBidIDs(ids ...uuid.UUID) *InvoiceUpdate {
	iu.mutation.AddBidIDs(ids...)
	return iu
}

// AddBids adds the "bids" edges to the Bid entity.
func (iu *InvoiceUpdate) AddBids(b ...*Bid) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.AddBidIDs(ids...)
}

// SetIssuerID sets the "issuer" edge to the Issuer entity by ID.
func (iu *InvoiceUpdate) SetIssuerID(id uuid.UUID) *InvoiceUpdate {
	iu.mutation.SetIssuerID(id)
	return iu
}

// SetIssuer sets the "issuer" edge to the Issuer entity.
func (iu *InvoiceUpdate) SetIssuer(i *Issuer) *InvoiceUpdate {
	return iu.SetIssuerID(i.ID)
}

// AddInvestorIDs adds the "investor" edge to the Investor entity by IDs.
func (iu *InvoiceUpdate) AddInvestorIDs(ids ...uuid.UUID) *InvoiceUpdate {
	iu.mutation.AddInvestorIDs(ids...)
	return iu
}

// AddInvestor adds the "investor" edges to the Investor entity.
func (iu *InvoiceUpdate) AddInvestor(i ...*Investor) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddInvestorIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iu *InvoiceUpdate) Mutation() *InvoiceMutation {
	return iu.mutation
}

// ClearItems clears all "items" edges to the InvoiceItem entity.
func (iu *InvoiceUpdate) ClearItems() *InvoiceUpdate {
	iu.mutation.ClearItems()
	return iu
}

// RemoveItemIDs removes the "items" edge to InvoiceItem entities by IDs.
func (iu *InvoiceUpdate) RemoveItemIDs(ids ...uuid.UUID) *InvoiceUpdate {
	iu.mutation.RemoveItemIDs(ids...)
	return iu
}

// RemoveItems removes "items" edges to InvoiceItem entities.
func (iu *InvoiceUpdate) RemoveItems(i ...*InvoiceItem) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveItemIDs(ids...)
}

// ClearBids clears all "bids" edges to the Bid entity.
func (iu *InvoiceUpdate) ClearBids() *InvoiceUpdate {
	iu.mutation.ClearBids()
	return iu
}

// RemoveBidIDs removes the "bids" edge to Bid entities by IDs.
func (iu *InvoiceUpdate) RemoveBidIDs(ids ...uuid.UUID) *InvoiceUpdate {
	iu.mutation.RemoveBidIDs(ids...)
	return iu
}

// RemoveBids removes "bids" edges to Bid entities.
func (iu *InvoiceUpdate) RemoveBids(b ...*Bid) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.RemoveBidIDs(ids...)
}

// ClearIssuer clears the "issuer" edge to the Issuer entity.
func (iu *InvoiceUpdate) ClearIssuer() *InvoiceUpdate {
	iu.mutation.ClearIssuer()
	return iu
}

// ClearInvestor clears all "investor" edges to the Investor entity.
func (iu *InvoiceUpdate) ClearInvestor() *InvoiceUpdate {
	iu.mutation.ClearInvestor()
	return iu
}

// RemoveInvestorIDs removes the "investor" edge to Investor entities by IDs.
func (iu *InvoiceUpdate) RemoveInvestorIDs(ids ...uuid.UUID) *InvoiceUpdate {
	iu.mutation.RemoveInvestorIDs(ids...)
	return iu
}

// RemoveInvestor removes "investor" edges to Investor entities.
func (iu *InvoiceUpdate) RemoveInvestor(i ...*Investor) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveInvestorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InvoiceUpdate) check() error {
	if v, ok := iu.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if _, ok := iu.mutation.IssuerID(); iu.mutation.IssuerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invoice.issuer"`)
	}
	return nil
}

func (iu *InvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.AskingPrice(); ok {
		_spec.SetField(invoice.FieldAskingPrice, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedAskingPrice(); ok {
		_spec.AddField(invoice.FieldAskingPrice, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.IsLocked(); ok {
		_spec.SetField(invoice.FieldIsLocked, field.TypeBool, value)
	}
	if value, ok := iu.mutation.IsApproved(); ok {
		_spec.SetField(invoice.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := iu.mutation.InvoiceNumber(); ok {
		_spec.SetField(invoice.FieldInvoiceNumber, field.TypeString, value)
	}
	if value, ok := iu.mutation.InvoiceDate(); ok {
		_spec.SetField(invoice.FieldInvoiceDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.AmountDue(); ok {
		_spec.SetField(invoice.FieldAmountDue, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedAmountDue(); ok {
		_spec.AddField(invoice.FieldAmountDue, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.CustomerName(); ok {
		_spec.SetField(invoice.FieldCustomerName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Reference(); ok {
		_spec.SetField(invoice.FieldReference, field.TypeString, value)
	}
	if iu.mutation.ReferenceCleared() {
		_spec.ClearField(invoice.FieldReference, field.TypeString)
	}
	if value, ok := iu.mutation.CompanyName(); ok {
		_spec.SetField(invoice.FieldCompanyName, field.TypeString, value)
	}
	if iu.mutation.CompanyNameCleared() {
		_spec.ClearField(invoice.FieldCompanyName, field.TypeString)
	}
	if value, ok := iu.mutation.Currency(); ok {
		_spec.SetField(invoice.FieldCurrency, field.TypeString, value)
	}
	if value, ok := iu.mutation.TotalAmount(); ok {
		_spec.SetField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedTotalAmount(); ok {
		_spec.AddField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if iu.mutation.TotalAmountCleared() {
		_spec.ClearField(invoice.FieldTotalAmount, field.TypeFloat64)
	}
	if value, ok := iu.mutation.TotalVat(); ok {
		_spec.SetField(invoice.FieldTotalVat, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedTotalVat(); ok {
		_spec.AddField(invoice.FieldTotalVat, field.TypeFloat64, value)
	}
	if iu.mutation.TotalVatCleared() {
		_spec.ClearField(invoice.FieldTotalVat, field.TypeFloat64)
	}
	if iu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !iu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.BidsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.BidsTable,
			Columns: []string{invoice.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedBidsIDs(); len(nodes) > 0 && !iu.mutation.BidsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.BidsTable,
			Columns: []string{invoice.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BidsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.BidsTable,
			Columns: []string{invoice.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.IssuerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.IssuerTable,
			Columns: []string{invoice.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.IssuerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.IssuerTable,
			Columns: []string{invoice.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.InvestorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invoice.InvestorTable,
			Columns: invoice.InvestorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedInvestorIDs(); len(nodes) > 0 && !iu.mutation.InvestorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invoice.InvestorTable,
			Columns: invoice.InvestorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.InvestorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invoice.InvestorTable,
			Columns: invoice.InvestorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceMutation
}

// SetStatus sets the "status" field.
func (iuo *InvoiceUpdateOne) SetStatus(i invoice.Status) *InvoiceUpdateOne {
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableStatus(i *invoice.Status) *InvoiceUpdateOne {
	if i != nil {
		iuo.SetStatus(*i)
	}
	return iuo
}

// SetAskingPrice sets the "asking_price" field.
func (iuo *InvoiceUpdateOne) SetAskingPrice(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetAskingPrice()
	iuo.mutation.SetAskingPrice(f)
	return iuo
}

// SetNillableAskingPrice sets the "asking_price" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableAskingPrice(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetAskingPrice(*f)
	}
	return iuo
}

// AddAskingPrice adds f to the "asking_price" field.
func (iuo *InvoiceUpdateOne) AddAskingPrice(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddAskingPrice(f)
	return iuo
}

// SetIsLocked sets the "is_locked" field.
func (iuo *InvoiceUpdateOne) SetIsLocked(b bool) *InvoiceUpdateOne {
	iuo.mutation.SetIsLocked(b)
	return iuo
}

// SetNillableIsLocked sets the "is_locked" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableIsLocked(b *bool) *InvoiceUpdateOne {
	if b != nil {
		iuo.SetIsLocked(*b)
	}
	return iuo
}

// SetIsApproved sets the "is_approved" field.
func (iuo *InvoiceUpdateOne) SetIsApproved(b bool) *InvoiceUpdateOne {
	iuo.mutation.SetIsApproved(b)
	return iuo
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableIsApproved(b *bool) *InvoiceUpdateOne {
	if b != nil {
		iuo.SetIsApproved(*b)
	}
	return iuo
}

// SetInvoiceNumber sets the "invoice_number" field.
func (iuo *InvoiceUpdateOne) SetInvoiceNumber(s string) *InvoiceUpdateOne {
	iuo.mutation.SetInvoiceNumber(s)
	return iuo
}

// SetInvoiceDate sets the "invoice_date" field.
func (iuo *InvoiceUpdateOne) SetInvoiceDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetInvoiceDate(t)
	return iuo
}

// SetDueDate sets the "due_date" field.
func (iuo *InvoiceUpdateOne) SetDueDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetDueDate(t)
	return iuo
}

// SetAmountDue sets the "amount_due" field.
func (iuo *InvoiceUpdateOne) SetAmountDue(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetAmountDue()
	iuo.mutation.SetAmountDue(f)
	return iuo
}

// AddAmountDue adds f to the "amount_due" field.
func (iuo *InvoiceUpdateOne) AddAmountDue(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddAmountDue(f)
	return iuo
}

// SetCustomerName sets the "customer_name" field.
func (iuo *InvoiceUpdateOne) SetCustomerName(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerName(s)
	return iuo
}

// SetReference sets the "reference" field.
func (iuo *InvoiceUpdateOne) SetReference(s string) *InvoiceUpdateOne {
	iuo.mutation.SetReference(s)
	return iuo
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableReference(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetReference(*s)
	}
	return iuo
}

// ClearReference clears the value of the "reference" field.
func (iuo *InvoiceUpdateOne) ClearReference() *InvoiceUpdateOne {
	iuo.mutation.ClearReference()
	return iuo
}

// SetCompanyName sets the "company_name" field.
func (iuo *InvoiceUpdateOne) SetCompanyName(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyName(s)
	return iuo
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCompanyName(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCompanyName(*s)
	}
	return iuo
}

// ClearCompanyName clears the value of the "company_name" field.
func (iuo *InvoiceUpdateOne) ClearCompanyName() *InvoiceUpdateOne {
	iuo.mutation.ClearCompanyName()
	return iuo
}

// SetCurrency sets the "currency" field.
func (iuo *InvoiceUpdateOne) SetCurrency(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCurrency(s)
	return iuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCurrency(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCurrency(*s)
	}
	return iuo
}

// SetTotalAmount sets the "total_amount" field.
func (iuo *InvoiceUpdateOne) SetTotalAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetTotalAmount()
	iuo.mutation.SetTotalAmount(f)
	return iuo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableTotalAmount(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetTotalAmount(*f)
	}
	return iuo
}

// AddTotalAmount adds f to the "total_amount" field.
func (iuo *InvoiceUpdateOne) AddTotalAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddTotalAmount(f)
	return iuo
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (iuo *InvoiceUpdateOne) ClearTotalAmount() *InvoiceUpdateOne {
	iuo.mutation.ClearTotalAmount()
	return iuo
}

// SetTotalVat sets the "total_vat" field.
func (iuo *InvoiceUpdateOne) SetTotalVat(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetTotalVat()
	iuo.mutation.SetTotalVat(f)
	return iuo
}

// SetNillableTotalVat sets the "total_vat" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableTotalVat(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetTotalVat(*f)
	}
	return iuo
}

// AddTotalVat adds f to the "total_vat" field.
func (iuo *InvoiceUpdateOne) AddTotalVat(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddTotalVat(f)
	return iuo
}

// ClearTotalVat clears the value of the "total_vat" field.
func (iuo *InvoiceUpdateOne) ClearTotalVat() *InvoiceUpdateOne {
	iuo.mutation.ClearTotalVat()
	return iuo
}

// AddItemIDs adds the "items" edge to the InvoiceItem entity by IDs.
func (iuo *InvoiceUpdateOne) AddItemIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.AddItemIDs(ids...)
	return iuo
}

// AddItems adds the "items" edges to the InvoiceItem entity.
func (iuo *InvoiceUpdateOne) AddItems(i ...*InvoiceItem) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddItemIDs(ids...)
}

// AddBidIDs adds the "bids" edge to the Bid entity by IDs.
func (iuo *InvoiceUpdateOne) AddBidIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.AddBidIDs(ids...)
	return iuo
}

// AddBids adds the "bids" edges to the Bid entity.
func (iuo *InvoiceUpdateOne) AddBids(b ...*Bid) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.AddBidIDs(ids...)
}

// SetIssuerID sets the "issuer" edge to the Issuer entity by ID.
func (iuo *InvoiceUpdateOne) SetIssuerID(id uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.SetIssuerID(id)
	return iuo
}

// SetIssuer sets the "issuer" edge to the Issuer entity.
func (iuo *InvoiceUpdateOne) SetIssuer(i *Issuer) *InvoiceUpdateOne {
	return iuo.SetIssuerID(i.ID)
}

// AddInvestorIDs adds the "investor" edge to the Investor entity by IDs.
func (iuo *InvoiceUpdateOne) AddInvestorIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.AddInvestorIDs(ids...)
	return iuo
}

// AddInvestor adds the "investor" edges to the Investor entity.
func (iuo *InvoiceUpdateOne) AddInvestor(i ...*Investor) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddInvestorIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iuo *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return iuo.mutation
}

// ClearItems clears all "items" edges to the InvoiceItem entity.
func (iuo *InvoiceUpdateOne) ClearItems() *InvoiceUpdateOne {
	iuo.mutation.ClearItems()
	return iuo
}

// RemoveItemIDs removes the "items" edge to InvoiceItem entities by IDs.
func (iuo *InvoiceUpdateOne) RemoveItemIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.RemoveItemIDs(ids...)
	return iuo
}

// RemoveItems removes "items" edges to InvoiceItem entities.
func (iuo *InvoiceUpdateOne) RemoveItems(i ...*InvoiceItem) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveItemIDs(ids...)
}

// ClearBids clears all "bids" edges to the Bid entity.
func (iuo *InvoiceUpdateOne) ClearBids() *InvoiceUpdateOne {
	iuo.mutation.ClearBids()
	return iuo
}

// RemoveBidIDs removes the "bids" edge to Bid entities by IDs.
func (iuo *InvoiceUpdateOne) RemoveBidIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.RemoveBidIDs(ids...)
	return iuo
}

// RemoveBids removes "bids" edges to Bid entities.
func (iuo *InvoiceUpdateOne) RemoveBids(b ...*Bid) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.RemoveBidIDs(ids...)
}

// ClearIssuer clears the "issuer" edge to the Issuer entity.
func (iuo *InvoiceUpdateOne) ClearIssuer() *InvoiceUpdateOne {
	iuo.mutation.ClearIssuer()
	return iuo
}

// ClearInvestor clears all "investor" edges to the Investor entity.
func (iuo *InvoiceUpdateOne) ClearInvestor() *InvoiceUpdateOne {
	iuo.mutation.ClearInvestor()
	return iuo
}

// RemoveInvestorIDs removes the "investor" edge to Investor entities by IDs.
func (iuo *InvoiceUpdateOne) RemoveInvestorIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	iuo.mutation.RemoveInvestorIDs(ids...)
	return iuo
}

// RemoveInvestor removes "investor" edges to Investor entities.
func (iuo *InvoiceUpdateOne) RemoveInvestor(i ...*Investor) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveInvestorIDs(ids...)
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iuo *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invoice entity.
func (iuo *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InvoiceUpdateOne) check() error {
	if v, ok := iuo.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.IssuerID(); iuo.mutation.IssuerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invoice.issuer"`)
	}
	return nil
}

func (iuo *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.AskingPrice(); ok {
		_spec.SetField(invoice.FieldAskingPrice, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedAskingPrice(); ok {
		_spec.AddField(invoice.FieldAskingPrice, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.IsLocked(); ok {
		_spec.SetField(invoice.FieldIsLocked, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.IsApproved(); ok {
		_spec.SetField(invoice.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.InvoiceNumber(); ok {
		_spec.SetField(invoice.FieldInvoiceNumber, field.TypeString, value)
	}
	if value, ok := iuo.mutation.InvoiceDate(); ok {
		_spec.SetField(invoice.FieldInvoiceDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.AmountDue(); ok {
		_spec.SetField(invoice.FieldAmountDue, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedAmountDue(); ok {
		_spec.AddField(invoice.FieldAmountDue, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.CustomerName(); ok {
		_spec.SetField(invoice.FieldCustomerName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Reference(); ok {
		_spec.SetField(invoice.FieldReference, field.TypeString, value)
	}
	if iuo.mutation.ReferenceCleared() {
		_spec.ClearField(invoice.FieldReference, field.TypeString)
	}
	if value, ok := iuo.mutation.CompanyName(); ok {
		_spec.SetField(invoice.FieldCompanyName, field.TypeString, value)
	}
	if iuo.mutation.CompanyNameCleared() {
		_spec.ClearField(invoice.FieldCompanyName, field.TypeString)
	}
	if value, ok := iuo.mutation.Currency(); ok {
		_spec.SetField(invoice.FieldCurrency, field.TypeString, value)
	}
	if value, ok := iuo.mutation.TotalAmount(); ok {
		_spec.SetField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if iuo.mutation.TotalAmountCleared() {
		_spec.ClearField(invoice.FieldTotalAmount, field.TypeFloat64)
	}
	if value, ok := iuo.mutation.TotalVat(); ok {
		_spec.SetField(invoice.FieldTotalVat, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedTotalVat(); ok {
		_spec.AddField(invoice.FieldTotalVat, field.TypeFloat64, value)
	}
	if iuo.mutation.TotalVatCleared() {
		_spec.ClearField(invoice.FieldTotalVat, field.TypeFloat64)
	}
	if iuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !iuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.BidsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.BidsTable,
			Columns: []string{invoice.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedBidsIDs(); len(nodes) > 0 && !iuo.mutation.BidsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.BidsTable,
			Columns: []string{invoice.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BidsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.BidsTable,
			Columns: []string{invoice.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.IssuerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.IssuerTable,
			Columns: []string{invoice.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.IssuerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.IssuerTable,
			Columns: []string{invoice.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.InvestorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invoice.InvestorTable,
			Columns: invoice.InvestorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedInvestorIDs(); len(nodes) > 0 && !iuo.mutation.InvestorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invoice.InvestorTable,
			Columns: invoice.InvestorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.InvestorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   invoice.InvestorTable,
			Columns: invoice.InvestorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invoice{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
