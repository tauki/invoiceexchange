// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/invoice"
	"github.com/tauki/invoiceexchange/ent/invoiceitem"
)

// InvoiceItemCreate is the builder for creating a InvoiceItem entity.
type InvoiceItemCreate struct {
	config
	mutation *InvoiceItemMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (iic *InvoiceItemCreate) SetDescription(s string) *InvoiceItemCreate {
	iic.mutation.SetDescription(s)
	return iic
}

// SetQuantity sets the "quantity" field.
func (iic *InvoiceItemCreate) SetQuantity(i int) *InvoiceItemCreate {
	iic.mutation.SetQuantity(i)
	return iic
}

// SetUnitPrice sets the "unit_price" field.
func (iic *InvoiceItemCreate) SetUnitPrice(f float64) *InvoiceItemCreate {
	iic.mutation.SetUnitPrice(f)
	return iic
}

// SetAmount sets the "amount" field.
func (iic *InvoiceItemCreate) SetAmount(f float64) *InvoiceItemCreate {
	iic.mutation.SetAmount(f)
	return iic
}

// SetVatRate sets the "vat_rate" field.
func (iic *InvoiceItemCreate) SetVatRate(f float64) *InvoiceItemCreate {
	iic.mutation.SetVatRate(f)
	return iic
}

// SetNillableVatRate sets the "vat_rate" field if the given value is not nil.
func (iic *InvoiceItemCreate) SetNillableVatRate(f *float64) *InvoiceItemCreate {
	if f != nil {
		iic.SetVatRate(*f)
	}
	return iic
}

// SetVatAmount sets the "vat_amount" field.
func (iic *InvoiceItemCreate) SetVatAmount(f float64) *InvoiceItemCreate {
	iic.mutation.SetVatAmount(f)
	return iic
}

// SetNillableVatAmount sets the "vat_amount" field if the given value is not nil.
func (iic *InvoiceItemCreate) SetNillableVatAmount(f *float64) *InvoiceItemCreate {
	if f != nil {
		iic.SetVatAmount(*f)
	}
	return iic
}

// SetID sets the "id" field.
func (iic *InvoiceItemCreate) SetID(u uuid.UUID) *InvoiceItemCreate {
	iic.mutation.SetID(u)
	return iic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iic *InvoiceItemCreate) SetNillableID(u *uuid.UUID) *InvoiceItemCreate {
	if u != nil {
		iic.SetID(*u)
	}
	return iic
}

// SetInvoiceID sets the "invoice" edge to the Invoice entity by ID.
func (iic *InvoiceItemCreate) SetInvoiceID(id uuid.UUID) *InvoiceItemCreate {
	iic.mutation.SetInvoiceID(id)
	return iic
}

// SetNillableInvoiceID sets the "invoice" edge to the Invoice entity by ID if the given value is not nil.
func (iic *InvoiceItemCreate) SetNillableInvoiceID(id *uuid.UUID) *InvoiceItemCreate {
	if id != nil {
		iic = iic.SetInvoiceID(*id)
	}
	return iic
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (iic *InvoiceItemCreate) SetInvoice(i *Invoice) *InvoiceItemCreate {
	return iic.SetInvoiceID(i.ID)
}

// Mutation returns the InvoiceItemMutation object of the builder.
func (iic *InvoiceItemCreate) Mutation() *InvoiceItemMutation {
	return iic.mutation
}

// Save creates the InvoiceItem in the database.
func (iic *InvoiceItemCreate) Save(ctx context.Context) (*InvoiceItem, error) {
	iic.defaults()
	return withHooks(ctx, iic.sqlSave, iic.mutation, iic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iic *InvoiceItemCreate) SaveX(ctx context.Context) *InvoiceItem {
	v, err := iic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iic *InvoiceItemCreate) Exec(ctx context.Context) error {
	_, err := iic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iic *InvoiceItemCreate) ExecX(ctx context.Context) {
	if err := iic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iic *InvoiceItemCreate) defaults() {
	if _, ok := iic.mutation.VatRate(); !ok {
		v := invoiceitem.DefaultVatRate
		iic.mutation.SetVatRate(v)
	}
	if _, ok := iic.mutation.VatAmount(); !ok {
		v := invoiceitem.DefaultVatAmount
		iic.mutation.SetVatAmount(v)
	}
	if _, ok := iic.mutation.ID(); !ok {
		v := invoiceitem.DefaultID()
		iic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iic *InvoiceItemCreate) check() error {
	if _, ok := iic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "InvoiceItem.description"`)}
	}
	if _, ok := iic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "InvoiceItem.quantity"`)}
	}
	if _, ok := iic.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "unit_price", err: errors.New(`ent: missing required field "InvoiceItem.unit_price"`)}
	}
	if _, ok := iic.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "InvoiceItem.amount"`)}
	}
	if _, ok := iic.mutation.VatRate(); !ok {
		return &ValidationError{Name: "vat_rate", err: errors.New(`ent: missing required field "InvoiceItem.vat_rate"`)}
	}
	if _, ok := iic.mutation.VatAmount(); !ok {
		return &ValidationError{Name: "vat_amount", err: errors.New(`ent: missing required field "InvoiceItem.vat_amount"`)}
	}
	return nil
}

func (iic *InvoiceItemCreate) sqlSave(ctx context.Context) (*InvoiceItem, error) {
	if err := iic.check(); err != nil {
		return nil, err
	}
	_node, _spec := iic.createSpec()
	if err := sqlgraph.CreateNode(ctx, iic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iic.mutation.id = &_node.ID
	iic.mutation.done = true
	return _node, nil
}

func (iic *InvoiceItemCreate) createSpec() (*InvoiceItem, *sqlgraph.CreateSpec) {
	var (
		_node = &InvoiceItem{config: iic.config}
		_spec = sqlgraph.NewCreateSpec(invoiceitem.Table, sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeUUID))
	)
	if id, ok := iic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iic.mutation.Description(); ok {
		_spec.SetField(invoiceitem.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := iic.mutation.Quantity(); ok {
		_spec.SetField(invoiceitem.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := iic.mutation.UnitPrice(); ok {
		_spec.SetField(invoiceitem.FieldUnitPrice, field.TypeFloat64, value)
		_node.UnitPrice = value
	}
	if value, ok := iic.mutation.Amount(); ok {
		_spec.SetField(invoiceitem.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := iic.mutation.VatRate(); ok {
		_spec.SetField(invoiceitem.FieldVatRate, field.TypeFloat64, value)
		_node.VatRate = value
	}
	if value, ok := iic.mutation.VatAmount(); ok {
		_spec.SetField(invoiceitem.FieldVatAmount, field.TypeFloat64, value)
		_node.VatAmount = value
	}
	if nodes := iic.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceitem.InvoiceTable,
			Columns: []string{invoiceitem.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invoice_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvoiceItemCreateBulk is the builder for creating many InvoiceItem entities in bulk.
type InvoiceItemCreateBulk struct {
	config
	builders []*InvoiceItemCreate
}

// Save creates the InvoiceItem entities in the database.
func (iicb *InvoiceItemCreateBulk) Save(ctx context.Context) ([]*InvoiceItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iicb.builders))
	nodes := make([]*InvoiceItem, len(iicb.builders))
	mutators := make([]Mutator, len(iicb.builders))
	for i := range iicb.builders {
		func(i int, root context.Context) {
			builder := iicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iicb *InvoiceItemCreateBulk) SaveX(ctx context.Context) []*InvoiceItem {
	v, err := iicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iicb *InvoiceItemCreateBulk) Exec(ctx context.Context) error {
	_, err := iicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iicb *InvoiceItemCreateBulk) ExecX(ctx context.Context) {
	if err := iicb.Exec(ctx); err != nil {
		panic(err)
	}
}
