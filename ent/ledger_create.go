// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/ledger"
)

// LedgerCreate is the builder for creating a Ledger entity.
type LedgerCreate struct {
	config
	mutation *LedgerMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (lc *LedgerCreate) SetStatus(l ledger.Status) *LedgerCreate {
	lc.mutation.SetStatus(l)
	return lc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableStatus(l *ledger.Status) *LedgerCreate {
	if l != nil {
		lc.SetStatus(*l)
	}
	return lc
}

// SetInvoiceID sets the "invoice_id" field.
func (lc *LedgerCreate) SetInvoiceID(u uuid.UUID) *LedgerCreate {
	lc.mutation.SetInvoiceID(u)
	return lc
}

// SetEntity sets the "entity" field.
func (lc *LedgerCreate) SetEntity(l ledger.Entity) *LedgerCreate {
	lc.mutation.SetEntity(l)
	return lc
}

// SetEntityID sets the "entity_id" field.
func (lc *LedgerCreate) SetEntityID(u uuid.UUID) *LedgerCreate {
	lc.mutation.SetEntityID(u)
	return lc
}

// SetAmount sets the "amount" field.
func (lc *LedgerCreate) SetAmount(f float64) *LedgerCreate {
	lc.mutation.SetAmount(f)
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LedgerCreate) SetCreatedAt(t time.Time) *LedgerCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableCreatedAt(t *time.Time) *LedgerCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LedgerCreate) SetUpdatedAt(t time.Time) *LedgerCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableUpdatedAt(t *time.Time) *LedgerCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LedgerCreate) SetID(u uuid.UUID) *LedgerCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableID(u *uuid.UUID) *LedgerCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// Mutation returns the LedgerMutation object of the builder.
func (lc *LedgerCreate) Mutation() *LedgerMutation {
	return lc.mutation
}

// Save creates the Ledger in the database.
func (lc *LedgerCreate) Save(ctx context.Context) (*Ledger, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LedgerCreate) SaveX(ctx context.Context) *Ledger {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LedgerCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LedgerCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LedgerCreate) defaults() {
	if _, ok := lc.mutation.Status(); !ok {
		v := ledger.DefaultStatus
		lc.mutation.SetStatus(v)
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := ledger.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := ledger.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := ledger.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LedgerCreate) check() error {
	if _, ok := lc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Ledger.status"`)}
	}
	if v, ok := lc.mutation.Status(); ok {
		if err := ledger.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ledger.status": %w`, err)}
		}
	}
	if _, ok := lc.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`ent: missing required field "Ledger.invoice_id"`)}
	}
	if _, ok := lc.mutation.Entity(); !ok {
		return &ValidationError{Name: "entity", err: errors.New(`ent: missing required field "Ledger.entity"`)}
	}
	if v, ok := lc.mutation.Entity(); ok {
		if err := ledger.EntityValidator(v); err != nil {
			return &ValidationError{Name: "entity", err: fmt.Errorf(`ent: validator failed for field "Ledger.entity": %w`, err)}
		}
	}
	if _, ok := lc.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "Ledger.entity_id"`)}
	}
	if _, ok := lc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Ledger.amount"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Ledger.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Ledger.updated_at"`)}
	}
	return nil
}

func (lc *LedgerCreate) sqlSave(ctx context.Context) (*Ledger, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LedgerCreate) createSpec() (*Ledger, *sqlgraph.CreateSpec) {
	var (
		_node = &Ledger{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(ledger.Table, sqlgraph.NewFieldSpec(ledger.FieldID, field.TypeUUID))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.Status(); ok {
		_spec.SetField(ledger.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lc.mutation.InvoiceID(); ok {
		_spec.SetField(ledger.FieldInvoiceID, field.TypeUUID, value)
		_node.InvoiceID = value
	}
	if value, ok := lc.mutation.Entity(); ok {
		_spec.SetField(ledger.FieldEntity, field.TypeEnum, value)
		_node.Entity = value
	}
	if value, ok := lc.mutation.EntityID(); ok {
		_spec.SetField(ledger.FieldEntityID, field.TypeUUID, value)
		_node.EntityID = value
	}
	if value, ok := lc.mutation.Amount(); ok {
		_spec.SetField(ledger.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(ledger.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(ledger.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// LedgerCreateBulk is the builder for creating many Ledger entities in bulk.
type LedgerCreateBulk struct {
	config
	builders []*LedgerCreate
}

// Save creates the Ledger entities in the database.
func (lcb *LedgerCreateBulk) Save(ctx context.Context) ([]*Ledger, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Ledger, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LedgerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LedgerCreateBulk) SaveX(ctx context.Context) []*Ledger {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LedgerCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LedgerCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
