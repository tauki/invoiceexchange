// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/invoice"
	"github.com/tauki/invoiceexchange/ent/invoiceitem"
	"github.com/tauki/invoiceexchange/ent/predicate"
)

// InvoiceItemUpdate is the builder for updating InvoiceItem entities.
type InvoiceItemUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceItemMutation
}

// Where appends a list predicates to the InvoiceItemUpdate builder.
func (iiu *InvoiceItemUpdate) Where(ps ...predicate.InvoiceItem) *InvoiceItemUpdate {
	iiu.mutation.Where(ps...)
	return iiu
}

// SetDescription sets the "description" field.
func (iiu *InvoiceItemUpdate) SetDescription(s string) *InvoiceItemUpdate {
	iiu.mutation.SetDescription(s)
	return iiu
}

// SetQuantity sets the "quantity" field.
func (iiu *InvoiceItemUpdate) SetQuantity(i int) *InvoiceItemUpdate {
	iiu.mutation.ResetQuantity()
	iiu.mutation.SetQuantity(i)
	return iiu
}

// AddQuantity adds i to the "quantity" field.
func (iiu *InvoiceItemUpdate) AddQuantity(i int) *InvoiceItemUpdate {
	iiu.mutation.AddQuantity(i)
	return iiu
}

// SetUnitPrice sets the "unit_price" field.
func (iiu *InvoiceItemUpdate) SetUnitPrice(f float64) *InvoiceItemUpdate {
	iiu.mutation.ResetUnitPrice()
	iiu.mutation.SetUnitPrice(f)
	return iiu
}

// AddUnitPrice adds f to the "unit_price" field.
func (iiu *InvoiceItemUpdate) AddUnitPrice(f float64) *InvoiceItemUpdate {
	iiu.mutation.AddUnitPrice(f)
	return iiu
}

// SetAmount sets the "amount" field.
func (iiu *InvoiceItemUpdate) SetAmount(f float64) *InvoiceItemUpdate {
	iiu.mutation.ResetAmount()
	iiu.mutation.SetAmount(f)
	return iiu
}

// AddAmount adds f to the "amount" field.
func (iiu *InvoiceItemUpdate) AddAmount(f float64) *InvoiceItemUpdate {
	iiu.mutation.AddAmount(f)
	return iiu
}

// SetVatRate sets the "vat_rate" field.
func (iiu *InvoiceItemUpdate) SetVatRate(f float64) *InvoiceItemUpdate {
	iiu.mutation.ResetVatRate()
	iiu.mutation.SetVatRate(f)
	return iiu
}

// SetNillableVatRate sets the "vat_rate" field if the given value is not nil.
func (iiu *InvoiceItemUpdate) SetNillableVatRate(f *float64) *InvoiceItemUpdate {
	if f != nil {
		iiu.SetVatRate(*f)
	}
	return iiu
}

// AddVatRate adds f to the "vat_rate" field.
func (iiu *InvoiceItemUpdate) AddVatRate(f float64) *InvoiceItemUpdate {
	iiu.mutation.AddVatRate(f)
	return iiu
}

// SetVatAmount sets the "vat_amount" field.
func (iiu *InvoiceItemUpdate) SetVatAmount(f float64) *InvoiceItemUpdate {
	iiu.mutation.ResetVatAmount()
	iiu.mutation.SetVatAmount(f)
	return iiu
}

// SetNillableVatAmount sets the "vat_amount" field if the given value is not nil.
func (iiu *InvoiceItemUpdate) SetNillableVatAmount(f *float64) *InvoiceItemUpdate {
	if f != nil {
		iiu.SetVatAmount(*f)
	}
	return iiu
}

// AddVatAmount adds f to the "vat_amount" field.
func (iiu *InvoiceItemUpdate) AddVatAmount(f float64) *InvoiceItemUpdate {
	iiu.mutation.AddVatAmount(f)
	return iiu
}

// SetInvoiceID sets the "invoice" edge to the Invoice entity by ID.
func (iiu *InvoiceItemUpdate) SetInvoiceID(id uuid.UUID) *InvoiceItemUpdate {
	iiu.mutation.SetInvoiceID(id)
	return iiu
}

// SetNillableInvoiceID sets the "invoice" edge to the Invoice entity by ID if the given value is not nil.
func (iiu *InvoiceItemUpdate) SetNillableInvoiceID(id *uuid.UUID) *InvoiceItemUpdate {
	if id != nil {
		iiu = iiu.SetInvoiceID(*id)
	}
	return iiu
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (iiu *InvoiceItemUpdate) SetInvoice(i *Invoice) *InvoiceItemUpdate {
	return iiu.SetInvoiceID(i.ID)
}

// Mutation returns the InvoiceItemMutation object of the builder.
func (iiu *InvoiceItemUpdate) Mutation() *InvoiceItemMutation {
	return iiu.mutation
}

// ClearInvoice clears the "invoice" edge to the Invoice entity.
func (iiu *InvoiceItemUpdate) ClearInvoice() *InvoiceItemUpdate {
	iiu.mutation.ClearInvoice()
	return iiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iiu *InvoiceItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iiu.sqlSave, iiu.mutation, iiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiu *InvoiceItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iiu *InvoiceItemUpdate) Exec(ctx context.Context) error {
	_, err := iiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiu *InvoiceItemUpdate) ExecX(ctx context.Context) {
	if err := iiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iiu *InvoiceItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(invoiceitem.Table, invoiceitem.Columns, sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeUUID))
	if ps := iiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiu.mutation.Description(); ok {
		_spec.SetField(invoiceitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := iiu.mutation.Quantity(); ok {
		_spec.SetField(invoiceitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := iiu.mutation.AddedQuantity(); ok {
		_spec.AddField(invoiceitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := iiu.mutation.UnitPrice(); ok {
		_spec.SetField(invoiceitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := iiu.mutation.AddedUnitPrice(); ok {
		_spec.AddField(invoiceitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := iiu.mutation.Amount(); ok {
		_spec.SetField(invoiceitem.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := iiu.mutation.AddedAmount(); ok {
		_spec.AddField(invoiceitem.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := iiu.mutation.VatRate(); ok {
		_spec.SetField(invoiceitem.FieldVatRate, field.TypeFloat64, value)
	}
	if value, ok := iiu.mutation.AddedVatRate(); ok {
		_spec.AddField(invoiceitem.FieldVatRate, field.TypeFloat64, value)
	}
	if value, ok := iiu.mutation.VatAmount(); ok {
		_spec.SetField(invoiceitem.FieldVatAmount, field.TypeFloat64, value)
	}
	if value, ok := iiu.mutation.AddedVatAmount(); ok {
		_spec.AddField(invoiceitem.FieldVatAmount, field.TypeFloat64, value)
	}
	if iiu.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceitem.InvoiceTable,
			Columns: []string{invoiceitem.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceitem.InvoiceTable,
			Columns: []string{invoiceitem.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoiceitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iiu.mutation.done = true
	return n, nil
}

// InvoiceItemUpdateOne is the builder for updating a single InvoiceItem entity.
type InvoiceItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceItemMutation
}

// SetDescription sets the "description" field.
func (iiuo *InvoiceItemUpdateOne) SetDescription(s string) *InvoiceItemUpdateOne {
	iiuo.mutation.SetDescription(s)
	return iiuo
}

// SetQuantity sets the "quantity" field.
func (iiuo *InvoiceItemUpdateOne) SetQuantity(i int) *InvoiceItemUpdateOne {
	iiuo.mutation.ResetQuantity()
	iiuo.mutation.SetQuantity(i)
	return iiuo
}

// AddQuantity adds i to the "quantity" field.
func (iiuo *InvoiceItemUpdateOne) AddQuantity(i int) *InvoiceItemUpdateOne {
	iiuo.mutation.AddQuantity(i)
	return iiuo
}

// SetUnitPrice sets the "unit_price" field.
func (iiuo *InvoiceItemUpdateOne) SetUnitPrice(f float64) *InvoiceItemUpdateOne {
	iiuo.mutation.ResetUnitPrice()
	iiuo.mutation.SetUnitPrice(f)
	return iiuo
}

// AddUnitPrice adds f to the "unit_price" field.
func (iiuo *InvoiceItemUpdateOne) AddUnitPrice(f float64) *InvoiceItemUpdateOne {
	iiuo.mutation.AddUnitPrice(f)
	return iiuo
}

// SetAmount sets the "amount" field.
func (iiuo *InvoiceItemUpdateOne) SetAmount(f float64) *InvoiceItemUpdateOne {
	iiuo.mutation.ResetAmount()
	iiuo.mutation.SetAmount(f)
	return iiuo
}

// AddAmount adds f to the "amount" field.
func (iiuo *InvoiceItemUpdateOne) AddAmount(f float64) *InvoiceItemUpdateOne {
	iiuo.mutation.AddAmount(f)
	return iiuo
}

// SetVatRate sets the "vat_rate" field.
func (iiuo *InvoiceItemUpdateOne) SetVatRate(f float64) *InvoiceItemUpdateOne {
	iiuo.mutation.ResetVatRate()
	iiuo.mutation.SetVatRate(f)
	return iiuo
}

// SetNillableVatRate sets the "vat_rate" field if the given value is not nil.
func (iiuo *InvoiceItemUpdateOne) SetNillableVatRate(f *float64) *InvoiceItemUpdateOne {
	if f != nil {
		iiuo.SetVatRate(*f)
	}
	return iiuo
}

// AddVatRate adds f to the "vat_rate" field.
func (iiuo *InvoiceItemUpdateOne) AddVatRate(f float64) *InvoiceItemUpdateOne {
	iiuo.mutation.AddVatRate(f)
	return iiuo
}

// SetVatAmount sets the "vat_amount" field.
func (iiuo *InvoiceItemUpdateOne) SetVatAmount(f float64) *InvoiceItemUpdateOne {
	iiuo.mutation.ResetVatAmount()
	iiuo.mutation.SetVatAmount(f)
	return iiuo
}

// SetNillableVatAmount sets the "vat_amount" field if the given value is not nil.
func (iiuo *InvoiceItemUpdateOne) SetNillableVatAmount(f *float64) *InvoiceItemUpdateOne {
	if f != nil {
		iiuo.SetVatAmount(*f)
	}
	return iiuo
}

// AddVatAmount adds f to the "vat_amount" field.
func (iiuo *InvoiceItemUpdateOne) AddVatAmount(f float64) *InvoiceItemUpdateOne {
	iiuo.mutation.AddVatAmount(f)
	return iiuo
}

// SetInvoiceID sets the "invoice" edge to the Invoice entity by ID.
func (iiuo *InvoiceItemUpdateOne) SetInvoiceID(id uuid.UUID) *InvoiceItemUpdateOne {
	iiuo.mutation.SetInvoiceID(id)
	return iiuo
}

// SetNillableInvoiceID sets the "invoice" edge to the Invoice entity by ID if the given value is not nil.
func (iiuo *InvoiceItemUpdateOne) SetNillableInvoiceID(id *uuid.UUID) *InvoiceItemUpdateOne {
	if id != nil {
		iiuo = iiuo.SetInvoiceID(*id)
	}
	return iiuo
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (iiuo *InvoiceItemUpdateOne) SetInvoice(i *Invoice) *InvoiceItemUpdateOne {
	return iiuo.SetInvoiceID(i.ID)
}

// Mutation returns the InvoiceItemMutation object of the builder.
func (iiuo *InvoiceItemUpdateOne) Mutation() *InvoiceItemMutation {
	return iiuo.mutation
}

// ClearInvoice clears the "invoice" edge to the Invoice entity.
func (iiuo *InvoiceItemUpdateOne) ClearInvoice() *InvoiceItemUpdateOne {
	iiuo.mutation.ClearInvoice()
	return iiuo
}

// Where appends a list predicates to the InvoiceItemUpdate builder.
func (iiuo *InvoiceItemUpdateOne) Where(ps ...predicate.InvoiceItem) *InvoiceItemUpdateOne {
	iiuo.mutation.Where(ps...)
	return iiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiuo *InvoiceItemUpdateOne) Select(field string, fields ...string) *InvoiceItemUpdateOne {
	iiuo.fields = append([]string{field}, fields...)
	return iiuo
}

// Save executes the query and returns the updated InvoiceItem entity.
func (iiuo *InvoiceItemUpdateOne) Save(ctx context.Context) (*InvoiceItem, error) {
	return withHooks(ctx, iiuo.sqlSave, iiuo.mutation, iiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiuo *InvoiceItemUpdateOne) SaveX(ctx context.Context) *InvoiceItem {
	node, err := iiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiuo *InvoiceItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiuo *InvoiceItemUpdateOne) ExecX(ctx context.Context) {
	if err := iiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iiuo *InvoiceItemUpdateOne) sqlSave(ctx context.Context) (_node *InvoiceItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(invoiceitem.Table, invoiceitem.Columns, sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeUUID))
	id, ok := iiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvoiceItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoiceitem.FieldID)
		for _, f := range fields {
			if !invoiceitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoiceitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiuo.mutation.Description(); ok {
		_spec.SetField(invoiceitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := iiuo.mutation.Quantity(); ok {
		_spec.SetField(invoiceitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := iiuo.mutation.AddedQuantity(); ok {
		_spec.AddField(invoiceitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := iiuo.mutation.UnitPrice(); ok {
		_spec.SetField(invoiceitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := iiuo.mutation.AddedUnitPrice(); ok {
		_spec.AddField(invoiceitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := iiuo.mutation.Amount(); ok {
		_spec.SetField(invoiceitem.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := iiuo.mutation.AddedAmount(); ok {
		_spec.AddField(invoiceitem.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := iiuo.mutation.VatRate(); ok {
		_spec.SetField(invoiceitem.FieldVatRate, field.TypeFloat64, value)
	}
	if value, ok := iiuo.mutation.AddedVatRate(); ok {
		_spec.AddField(invoiceitem.FieldVatRate, field.TypeFloat64, value)
	}
	if value, ok := iiuo.mutation.VatAmount(); ok {
		_spec.SetField(invoiceitem.FieldVatAmount, field.TypeFloat64, value)
	}
	if value, ok := iiuo.mutation.AddedVatAmount(); ok {
		_spec.AddField(invoiceitem.FieldVatAmount, field.TypeFloat64, value)
	}
	if iiuo.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceitem.InvoiceTable,
			Columns: []string{invoiceitem.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceitem.InvoiceTable,
			Columns: []string{invoiceitem.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InvoiceItem{config: iiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoiceitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iiuo.mutation.done = true
	return _node, nil
}
