// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tauki/invoiceexchange/ent/balance"
	"github.com/tauki/invoiceexchange/ent/bid"
	"github.com/tauki/invoiceexchange/ent/investor"
	"github.com/tauki/invoiceexchange/ent/invoice"
	"github.com/tauki/invoiceexchange/ent/invoiceitem"
	"github.com/tauki/invoiceexchange/ent/issuer"
	"github.com/tauki/invoiceexchange/ent/ledger"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Balance is the client for interacting with the Balance builders.
	Balance *BalanceClient
	// Bid is the client for interacting with the Bid builders.
	Bid *BidClient
	// Investor is the client for interacting with the Investor builders.
	Investor *InvestorClient
	// Invoice is the client for interacting with the Invoice builders.
	Invoice *InvoiceClient
	// InvoiceItem is the client for interacting with the InvoiceItem builders.
	InvoiceItem *InvoiceItemClient
	// Issuer is the client for interacting with the Issuer builders.
	Issuer *IssuerClient
	// Ledger is the client for interacting with the Ledger builders.
	Ledger *LedgerClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Balance = NewBalanceClient(c.config)
	c.Bid = NewBidClient(c.config)
	c.Investor = NewInvestorClient(c.config)
	c.Invoice = NewInvoiceClient(c.config)
	c.InvoiceItem = NewInvoiceItemClient(c.config)
	c.Issuer = NewIssuerClient(c.config)
	c.Ledger = NewLedgerClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Balance:     NewBalanceClient(cfg),
		Bid:         NewBidClient(cfg),
		Investor:    NewInvestorClient(cfg),
		Invoice:     NewInvoiceClient(cfg),
		InvoiceItem: NewInvoiceItemClient(cfg),
		Issuer:      NewIssuerClient(cfg),
		Ledger:      NewLedgerClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Balance:     NewBalanceClient(cfg),
		Bid:         NewBidClient(cfg),
		Investor:    NewInvestorClient(cfg),
		Invoice:     NewInvoiceClient(cfg),
		InvoiceItem: NewInvoiceItemClient(cfg),
		Issuer:      NewIssuerClient(cfg),
		Ledger:      NewLedgerClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Balance.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Balance, c.Bid, c.Investor, c.Invoice, c.InvoiceItem, c.Issuer, c.Ledger,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Balance, c.Bid, c.Investor, c.Invoice, c.InvoiceItem, c.Issuer, c.Ledger,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BalanceMutation:
		return c.Balance.mutate(ctx, m)
	case *BidMutation:
		return c.Bid.mutate(ctx, m)
	case *InvestorMutation:
		return c.Investor.mutate(ctx, m)
	case *InvoiceMutation:
		return c.Invoice.mutate(ctx, m)
	case *InvoiceItemMutation:
		return c.InvoiceItem.mutate(ctx, m)
	case *IssuerMutation:
		return c.Issuer.mutate(ctx, m)
	case *LedgerMutation:
		return c.Ledger.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BalanceClient is a client for the Balance schema.
type BalanceClient struct {
	config
}

// NewBalanceClient returns a client for the Balance from the given config.
func NewBalanceClient(c config) *BalanceClient {
	return &BalanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `balance.Hooks(f(g(h())))`.
func (c *BalanceClient) Use(hooks ...Hook) {
	c.hooks.Balance = append(c.hooks.Balance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `balance.Intercept(f(g(h())))`.
func (c *BalanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Balance = append(c.inters.Balance, interceptors...)
}

// Create returns a builder for creating a Balance entity.
func (c *BalanceClient) Create() *BalanceCreate {
	mutation := newBalanceMutation(c.config, OpCreate)
	return &BalanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Balance entities.
func (c *BalanceClient) CreateBulk(builders ...*BalanceCreate) *BalanceCreateBulk {
	return &BalanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Balance.
func (c *BalanceClient) Update() *BalanceUpdate {
	mutation := newBalanceMutation(c.config, OpUpdate)
	return &BalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BalanceClient) UpdateOne(b *Balance) *BalanceUpdateOne {
	mutation := newBalanceMutation(c.config, OpUpdateOne, withBalance(b))
	return &BalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BalanceClient) UpdateOneID(id uuid.UUID) *BalanceUpdateOne {
	mutation := newBalanceMutation(c.config, OpUpdateOne, withBalanceID(id))
	return &BalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Balance.
func (c *BalanceClient) Delete() *BalanceDelete {
	mutation := newBalanceMutation(c.config, OpDelete)
	return &BalanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BalanceClient) DeleteOne(b *Balance) *BalanceDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BalanceClient) DeleteOneID(id uuid.UUID) *BalanceDeleteOne {
	builder := c.Delete().Where(balance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BalanceDeleteOne{builder}
}

// Query returns a query builder for Balance.
func (c *BalanceClient) Query() *BalanceQuery {
	return &BalanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBalance},
		inters: c.Interceptors(),
	}
}

// Get returns a Balance entity by its id.
func (c *BalanceClient) Get(ctx context.Context, id uuid.UUID) (*Balance, error) {
	return c.Query().Where(balance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BalanceClient) GetX(ctx context.Context, id uuid.UUID) *Balance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvestor queries the investor edge of a Balance.
func (c *BalanceClient) QueryInvestor(b *Balance) *InvestorQuery {
	query := (&InvestorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(balance.Table, balance.FieldID, id),
			sqlgraph.To(investor.Table, investor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, balance.InvestorTable, balance.InvestorColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIssuer queries the issuer edge of a Balance.
func (c *BalanceClient) QueryIssuer(b *Balance) *IssuerQuery {
	query := (&IssuerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(balance.Table, balance.FieldID, id),
			sqlgraph.To(issuer.Table, issuer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, balance.IssuerTable, balance.IssuerColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BalanceClient) Hooks() []Hook {
	return c.hooks.Balance
}

// Interceptors returns the client interceptors.
func (c *BalanceClient) Interceptors() []Interceptor {
	return c.inters.Balance
}

func (c *BalanceClient) mutate(ctx context.Context, m *BalanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BalanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BalanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Balance mutation op: %q", m.Op())
	}
}

// BidClient is a client for the Bid schema.
type BidClient struct {
	config
}

// NewBidClient returns a client for the Bid from the given config.
func NewBidClient(c config) *BidClient {
	return &BidClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bid.Hooks(f(g(h())))`.
func (c *BidClient) Use(hooks ...Hook) {
	c.hooks.Bid = append(c.hooks.Bid, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bid.Intercept(f(g(h())))`.
func (c *BidClient) Intercept(interceptors ...Interceptor) {
	c.inters.Bid = append(c.inters.Bid, interceptors...)
}

// Create returns a builder for creating a Bid entity.
func (c *BidClient) Create() *BidCreate {
	mutation := newBidMutation(c.config, OpCreate)
	return &BidCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bid entities.
func (c *BidClient) CreateBulk(builders ...*BidCreate) *BidCreateBulk {
	return &BidCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bid.
func (c *BidClient) Update() *BidUpdate {
	mutation := newBidMutation(c.config, OpUpdate)
	return &BidUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BidClient) UpdateOne(b *Bid) *BidUpdateOne {
	mutation := newBidMutation(c.config, OpUpdateOne, withBid(b))
	return &BidUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BidClient) UpdateOneID(id uuid.UUID) *BidUpdateOne {
	mutation := newBidMutation(c.config, OpUpdateOne, withBidID(id))
	return &BidUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bid.
func (c *BidClient) Delete() *BidDelete {
	mutation := newBidMutation(c.config, OpDelete)
	return &BidDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BidClient) DeleteOne(b *Bid) *BidDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BidClient) DeleteOneID(id uuid.UUID) *BidDeleteOne {
	builder := c.Delete().Where(bid.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BidDeleteOne{builder}
}

// Query returns a query builder for Bid.
func (c *BidClient) Query() *BidQuery {
	return &BidQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBid},
		inters: c.Interceptors(),
	}
}

// Get returns a Bid entity by its id.
func (c *BidClient) Get(ctx context.Context, id uuid.UUID) (*Bid, error) {
	return c.Query().Where(bid.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BidClient) GetX(ctx context.Context, id uuid.UUID) *Bid {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvoice queries the invoice edge of a Bid.
func (c *BidClient) QueryInvoice(b *Bid) *InvoiceQuery {
	query := (&InvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bid.Table, bid.FieldID, id),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bid.InvoiceTable, bid.InvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvestor queries the investor edge of a Bid.
func (c *BidClient) QueryInvestor(b *Bid) *InvestorQuery {
	query := (&InvestorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bid.Table, bid.FieldID, id),
			sqlgraph.To(investor.Table, investor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bid.InvestorTable, bid.InvestorColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BidClient) Hooks() []Hook {
	return c.hooks.Bid
}

// Interceptors returns the client interceptors.
func (c *BidClient) Interceptors() []Interceptor {
	return c.inters.Bid
}

func (c *BidClient) mutate(ctx context.Context, m *BidMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BidCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BidUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BidUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BidDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Bid mutation op: %q", m.Op())
	}
}

// InvestorClient is a client for the Investor schema.
type InvestorClient struct {
	config
}

// NewInvestorClient returns a client for the Investor from the given config.
func NewInvestorClient(c config) *InvestorClient {
	return &InvestorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `investor.Hooks(f(g(h())))`.
func (c *InvestorClient) Use(hooks ...Hook) {
	c.hooks.Investor = append(c.hooks.Investor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `investor.Intercept(f(g(h())))`.
func (c *InvestorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Investor = append(c.inters.Investor, interceptors...)
}

// Create returns a builder for creating a Investor entity.
func (c *InvestorClient) Create() *InvestorCreate {
	mutation := newInvestorMutation(c.config, OpCreate)
	return &InvestorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Investor entities.
func (c *InvestorClient) CreateBulk(builders ...*InvestorCreate) *InvestorCreateBulk {
	return &InvestorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Investor.
func (c *InvestorClient) Update() *InvestorUpdate {
	mutation := newInvestorMutation(c.config, OpUpdate)
	return &InvestorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvestorClient) UpdateOne(i *Investor) *InvestorUpdateOne {
	mutation := newInvestorMutation(c.config, OpUpdateOne, withInvestor(i))
	return &InvestorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvestorClient) UpdateOneID(id uuid.UUID) *InvestorUpdateOne {
	mutation := newInvestorMutation(c.config, OpUpdateOne, withInvestorID(id))
	return &InvestorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Investor.
func (c *InvestorClient) Delete() *InvestorDelete {
	mutation := newInvestorMutation(c.config, OpDelete)
	return &InvestorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvestorClient) DeleteOne(i *Investor) *InvestorDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvestorClient) DeleteOneID(id uuid.UUID) *InvestorDeleteOne {
	builder := c.Delete().Where(investor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvestorDeleteOne{builder}
}

// Query returns a query builder for Investor.
func (c *InvestorClient) Query() *InvestorQuery {
	return &InvestorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvestor},
		inters: c.Interceptors(),
	}
}

// Get returns a Investor entity by its id.
func (c *InvestorClient) Get(ctx context.Context, id uuid.UUID) (*Investor, error) {
	return c.Query().Where(investor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvestorClient) GetX(ctx context.Context, id uuid.UUID) *Investor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBids queries the bids edge of a Investor.
func (c *InvestorClient) QueryBids(i *Investor) *BidQuery {
	query := (&BidClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(investor.Table, investor.FieldID, id),
			sqlgraph.To(bid.Table, bid.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, investor.BidsTable, investor.BidsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvoices queries the invoices edge of a Investor.
func (c *InvestorClient) QueryInvoices(i *Investor) *InvoiceQuery {
	query := (&InvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(investor.Table, investor.FieldID, id),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, investor.InvoicesTable, investor.InvoicesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBalance queries the balance edge of a Investor.
func (c *InvestorClient) QueryBalance(i *Investor) *BalanceQuery {
	query := (&BalanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(investor.Table, investor.FieldID, id),
			sqlgraph.To(balance.Table, balance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, investor.BalanceTable, investor.BalanceColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvestorClient) Hooks() []Hook {
	return c.hooks.Investor
}

// Interceptors returns the client interceptors.
func (c *InvestorClient) Interceptors() []Interceptor {
	return c.inters.Investor
}

func (c *InvestorClient) mutate(ctx context.Context, m *InvestorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvestorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvestorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvestorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvestorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Investor mutation op: %q", m.Op())
	}
}

// InvoiceClient is a client for the Invoice schema.
type InvoiceClient struct {
	config
}

// NewInvoiceClient returns a client for the Invoice from the given config.
func NewInvoiceClient(c config) *InvoiceClient {
	return &InvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoice.Hooks(f(g(h())))`.
func (c *InvoiceClient) Use(hooks ...Hook) {
	c.hooks.Invoice = append(c.hooks.Invoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoice.Intercept(f(g(h())))`.
func (c *InvoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Invoice = append(c.inters.Invoice, interceptors...)
}

// Create returns a builder for creating a Invoice entity.
func (c *InvoiceClient) Create() *InvoiceCreate {
	mutation := newInvoiceMutation(c.config, OpCreate)
	return &InvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invoice entities.
func (c *InvoiceClient) CreateBulk(builders ...*InvoiceCreate) *InvoiceCreateBulk {
	return &InvoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invoice.
func (c *InvoiceClient) Update() *InvoiceUpdate {
	mutation := newInvoiceMutation(c.config, OpUpdate)
	return &InvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoiceClient) UpdateOne(i *Invoice) *InvoiceUpdateOne {
	mutation := newInvoiceMutation(c.config, OpUpdateOne, withInvoice(i))
	return &InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoiceClient) UpdateOneID(id uuid.UUID) *InvoiceUpdateOne {
	mutation := newInvoiceMutation(c.config, OpUpdateOne, withInvoiceID(id))
	return &InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invoice.
func (c *InvoiceClient) Delete() *InvoiceDelete {
	mutation := newInvoiceMutation(c.config, OpDelete)
	return &InvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoiceClient) DeleteOne(i *Invoice) *InvoiceDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoiceClient) DeleteOneID(id uuid.UUID) *InvoiceDeleteOne {
	builder := c.Delete().Where(invoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoiceDeleteOne{builder}
}

// Query returns a query builder for Invoice.
func (c *InvoiceClient) Query() *InvoiceQuery {
	return &InvoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoice},
		inters: c.Interceptors(),
	}
}

// Get returns a Invoice entity by its id.
func (c *InvoiceClient) Get(ctx context.Context, id uuid.UUID) (*Invoice, error) {
	return c.Query().Where(invoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoiceClient) GetX(ctx context.Context, id uuid.UUID) *Invoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItems queries the items edge of a Invoice.
func (c *InvoiceClient) QueryItems(i *Invoice) *InvoiceItemQuery {
	query := (&InvoiceItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoice.Table, invoice.FieldID, id),
			sqlgraph.To(invoiceitem.Table, invoiceitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, invoice.ItemsTable, invoice.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBids queries the bids edge of a Invoice.
func (c *InvoiceClient) QueryBids(i *Invoice) *BidQuery {
	query := (&BidClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoice.Table, invoice.FieldID, id),
			sqlgraph.To(bid.Table, bid.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, invoice.BidsTable, invoice.BidsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIssuer queries the issuer edge of a Invoice.
func (c *InvoiceClient) QueryIssuer(i *Invoice) *IssuerQuery {
	query := (&IssuerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoice.Table, invoice.FieldID, id),
			sqlgraph.To(issuer.Table, issuer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invoice.IssuerTable, invoice.IssuerColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvestor queries the investor edge of a Invoice.
func (c *InvoiceClient) QueryInvestor(i *Invoice) *InvestorQuery {
	query := (&InvestorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoice.Table, invoice.FieldID, id),
			sqlgraph.To(investor.Table, investor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, invoice.InvestorTable, invoice.InvestorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvoiceClient) Hooks() []Hook {
	return c.hooks.Invoice
}

// Interceptors returns the client interceptors.
func (c *InvoiceClient) Interceptors() []Interceptor {
	return c.inters.Invoice
}

func (c *InvoiceClient) mutate(ctx context.Context, m *InvoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Invoice mutation op: %q", m.Op())
	}
}

// InvoiceItemClient is a client for the InvoiceItem schema.
type InvoiceItemClient struct {
	config
}

// NewInvoiceItemClient returns a client for the InvoiceItem from the given config.
func NewInvoiceItemClient(c config) *InvoiceItemClient {
	return &InvoiceItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoiceitem.Hooks(f(g(h())))`.
func (c *InvoiceItemClient) Use(hooks ...Hook) {
	c.hooks.InvoiceItem = append(c.hooks.InvoiceItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoiceitem.Intercept(f(g(h())))`.
func (c *InvoiceItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.InvoiceItem = append(c.inters.InvoiceItem, interceptors...)
}

// Create returns a builder for creating a InvoiceItem entity.
func (c *InvoiceItemClient) Create() *InvoiceItemCreate {
	mutation := newInvoiceItemMutation(c.config, OpCreate)
	return &InvoiceItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvoiceItem entities.
func (c *InvoiceItemClient) CreateBulk(builders ...*InvoiceItemCreate) *InvoiceItemCreateBulk {
	return &InvoiceItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvoiceItem.
func (c *InvoiceItemClient) Update() *InvoiceItemUpdate {
	mutation := newInvoiceItemMutation(c.config, OpUpdate)
	return &InvoiceItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoiceItemClient) UpdateOne(ii *InvoiceItem) *InvoiceItemUpdateOne {
	mutation := newInvoiceItemMutation(c.config, OpUpdateOne, withInvoiceItem(ii))
	return &InvoiceItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoiceItemClient) UpdateOneID(id uuid.UUID) *InvoiceItemUpdateOne {
	mutation := newInvoiceItemMutation(c.config, OpUpdateOne, withInvoiceItemID(id))
	return &InvoiceItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvoiceItem.
func (c *InvoiceItemClient) Delete() *InvoiceItemDelete {
	mutation := newInvoiceItemMutation(c.config, OpDelete)
	return &InvoiceItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoiceItemClient) DeleteOne(ii *InvoiceItem) *InvoiceItemDeleteOne {
	return c.DeleteOneID(ii.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoiceItemClient) DeleteOneID(id uuid.UUID) *InvoiceItemDeleteOne {
	builder := c.Delete().Where(invoiceitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoiceItemDeleteOne{builder}
}

// Query returns a query builder for InvoiceItem.
func (c *InvoiceItemClient) Query() *InvoiceItemQuery {
	return &InvoiceItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoiceItem},
		inters: c.Interceptors(),
	}
}

// Get returns a InvoiceItem entity by its id.
func (c *InvoiceItemClient) Get(ctx context.Context, id uuid.UUID) (*InvoiceItem, error) {
	return c.Query().Where(invoiceitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoiceItemClient) GetX(ctx context.Context, id uuid.UUID) *InvoiceItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvoice queries the invoice edge of a InvoiceItem.
func (c *InvoiceItemClient) QueryInvoice(ii *InvoiceItem) *InvoiceQuery {
	query := (&InvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoiceitem.Table, invoiceitem.FieldID, id),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invoiceitem.InvoiceTable, invoiceitem.InvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvoiceItemClient) Hooks() []Hook {
	return c.hooks.InvoiceItem
}

// Interceptors returns the client interceptors.
func (c *InvoiceItemClient) Interceptors() []Interceptor {
	return c.inters.InvoiceItem
}

func (c *InvoiceItemClient) mutate(ctx context.Context, m *InvoiceItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoiceItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoiceItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoiceItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoiceItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InvoiceItem mutation op: %q", m.Op())
	}
}

// IssuerClient is a client for the Issuer schema.
type IssuerClient struct {
	config
}

// NewIssuerClient returns a client for the Issuer from the given config.
func NewIssuerClient(c config) *IssuerClient {
	return &IssuerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `issuer.Hooks(f(g(h())))`.
func (c *IssuerClient) Use(hooks ...Hook) {
	c.hooks.Issuer = append(c.hooks.Issuer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `issuer.Intercept(f(g(h())))`.
func (c *IssuerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Issuer = append(c.inters.Issuer, interceptors...)
}

// Create returns a builder for creating a Issuer entity.
func (c *IssuerClient) Create() *IssuerCreate {
	mutation := newIssuerMutation(c.config, OpCreate)
	return &IssuerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Issuer entities.
func (c *IssuerClient) CreateBulk(builders ...*IssuerCreate) *IssuerCreateBulk {
	return &IssuerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Issuer.
func (c *IssuerClient) Update() *IssuerUpdate {
	mutation := newIssuerMutation(c.config, OpUpdate)
	return &IssuerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IssuerClient) UpdateOne(i *Issuer) *IssuerUpdateOne {
	mutation := newIssuerMutation(c.config, OpUpdateOne, withIssuer(i))
	return &IssuerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IssuerClient) UpdateOneID(id uuid.UUID) *IssuerUpdateOne {
	mutation := newIssuerMutation(c.config, OpUpdateOne, withIssuerID(id))
	return &IssuerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Issuer.
func (c *IssuerClient) Delete() *IssuerDelete {
	mutation := newIssuerMutation(c.config, OpDelete)
	return &IssuerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IssuerClient) DeleteOne(i *Issuer) *IssuerDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IssuerClient) DeleteOneID(id uuid.UUID) *IssuerDeleteOne {
	builder := c.Delete().Where(issuer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IssuerDeleteOne{builder}
}

// Query returns a query builder for Issuer.
func (c *IssuerClient) Query() *IssuerQuery {
	return &IssuerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIssuer},
		inters: c.Interceptors(),
	}
}

// Get returns a Issuer entity by its id.
func (c *IssuerClient) Get(ctx context.Context, id uuid.UUID) (*Issuer, error) {
	return c.Query().Where(issuer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IssuerClient) GetX(ctx context.Context, id uuid.UUID) *Issuer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvoices queries the invoices edge of a Issuer.
func (c *IssuerClient) QueryInvoices(i *Issuer) *InvoiceQuery {
	query := (&InvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(issuer.Table, issuer.FieldID, id),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, issuer.InvoicesTable, issuer.InvoicesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBalance queries the balance edge of a Issuer.
func (c *IssuerClient) QueryBalance(i *Issuer) *BalanceQuery {
	query := (&BalanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(issuer.Table, issuer.FieldID, id),
			sqlgraph.To(balance.Table, balance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, issuer.BalanceTable, issuer.BalanceColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IssuerClient) Hooks() []Hook {
	return c.hooks.Issuer
}

// Interceptors returns the client interceptors.
func (c *IssuerClient) Interceptors() []Interceptor {
	return c.inters.Issuer
}

func (c *IssuerClient) mutate(ctx context.Context, m *IssuerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IssuerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IssuerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IssuerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IssuerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Issuer mutation op: %q", m.Op())
	}
}

// LedgerClient is a client for the Ledger schema.
type LedgerClient struct {
	config
}

// NewLedgerClient returns a client for the Ledger from the given config.
func NewLedgerClient(c config) *LedgerClient {
	return &LedgerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ledger.Hooks(f(g(h())))`.
func (c *LedgerClient) Use(hooks ...Hook) {
	c.hooks.Ledger = append(c.hooks.Ledger, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ledger.Intercept(f(g(h())))`.
func (c *LedgerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ledger = append(c.inters.Ledger, interceptors...)
}

// Create returns a builder for creating a Ledger entity.
func (c *LedgerClient) Create() *LedgerCreate {
	mutation := newLedgerMutation(c.config, OpCreate)
	return &LedgerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ledger entities.
func (c *LedgerClient) CreateBulk(builders ...*LedgerCreate) *LedgerCreateBulk {
	return &LedgerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ledger.
func (c *LedgerClient) Update() *LedgerUpdate {
	mutation := newLedgerMutation(c.config, OpUpdate)
	return &LedgerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LedgerClient) UpdateOne(l *Ledger) *LedgerUpdateOne {
	mutation := newLedgerMutation(c.config, OpUpdateOne, withLedger(l))
	return &LedgerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LedgerClient) UpdateOneID(id uuid.UUID) *LedgerUpdateOne {
	mutation := newLedgerMutation(c.config, OpUpdateOne, withLedgerID(id))
	return &LedgerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ledger.
func (c *LedgerClient) Delete() *LedgerDelete {
	mutation := newLedgerMutation(c.config, OpDelete)
	return &LedgerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LedgerClient) DeleteOne(l *Ledger) *LedgerDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LedgerClient) DeleteOneID(id uuid.UUID) *LedgerDeleteOne {
	builder := c.Delete().Where(ledger.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LedgerDeleteOne{builder}
}

// Query returns a query builder for Ledger.
func (c *LedgerClient) Query() *LedgerQuery {
	return &LedgerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLedger},
		inters: c.Interceptors(),
	}
}

// Get returns a Ledger entity by its id.
func (c *LedgerClient) Get(ctx context.Context, id uuid.UUID) (*Ledger, error) {
	return c.Query().Where(ledger.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LedgerClient) GetX(ctx context.Context, id uuid.UUID) *Ledger {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LedgerClient) Hooks() []Hook {
	return c.hooks.Ledger
}

// Interceptors returns the client interceptors.
func (c *LedgerClient) Interceptors() []Interceptor {
	return c.inters.Ledger
}

func (c *LedgerClient) mutate(ctx context.Context, m *LedgerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LedgerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LedgerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LedgerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LedgerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ledger mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Balance, Bid, Investor, Invoice, InvoiceItem, Issuer, Ledger []ent.Hook
	}
	inters struct {
		Balance, Bid, Investor, Invoice, InvoiceItem, Issuer, Ledger []ent.Interceptor
	}
)
