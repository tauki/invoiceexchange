// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tauki/invoiceexchange/ent/bid"
	"github.com/tauki/invoiceexchange/ent/predicate"
)

// BidUpdate is the builder for updating Bid entities.
type BidUpdate struct {
	config
	hooks    []Hook
	mutation *BidMutation
}

// Where appends a list predicates to the BidUpdate builder.
func (bu *BidUpdate) Where(ps ...predicate.Bid) *BidUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetStatus sets the "status" field.
func (bu *BidUpdate) SetStatus(b bid.Status) *BidUpdate {
	bu.mutation.SetStatus(b)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BidUpdate) SetNillableStatus(b *bid.Status) *BidUpdate {
	if b != nil {
		bu.SetStatus(*b)
	}
	return bu
}

// SetAmount sets the "amount" field.
func (bu *BidUpdate) SetAmount(f float64) *BidUpdate {
	bu.mutation.ResetAmount()
	bu.mutation.SetAmount(f)
	return bu
}

// AddAmount adds f to the "amount" field.
func (bu *BidUpdate) AddAmount(f float64) *BidUpdate {
	bu.mutation.AddAmount(f)
	return bu
}

// SetAcceptedAmount sets the "accepted_amount" field.
func (bu *BidUpdate) SetAcceptedAmount(f float64) *BidUpdate {
	bu.mutation.ResetAcceptedAmount()
	bu.mutation.SetAcceptedAmount(f)
	return bu
}

// SetNillableAcceptedAmount sets the "accepted_amount" field if the given value is not nil.
func (bu *BidUpdate) SetNillableAcceptedAmount(f *float64) *BidUpdate {
	if f != nil {
		bu.SetAcceptedAmount(*f)
	}
	return bu
}

// AddAcceptedAmount adds f to the "accepted_amount" field.
func (bu *BidUpdate) AddAcceptedAmount(f float64) *BidUpdate {
	bu.mutation.AddAcceptedAmount(f)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BidUpdate) SetUpdatedAt(t time.Time) *BidUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// Mutation returns the BidMutation object of the builder.
func (bu *BidUpdate) Mutation() *BidMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BidUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BidUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BidUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BidUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BidUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := bid.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BidUpdate) check() error {
	if v, ok := bu.mutation.Status(); ok {
		if err := bid.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bid.status": %w`, err)}
		}
	}
	if _, ok := bu.mutation.InvoiceID(); bu.mutation.InvoiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Bid.invoice"`)
	}
	if _, ok := bu.mutation.InvestorID(); bu.mutation.InvestorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Bid.investor"`)
	}
	return nil
}

func (bu *BidUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bid.Table, bid.Columns, sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(bid.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.Amount(); ok {
		_spec.SetField(bid.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedAmount(); ok {
		_spec.AddField(bid.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AcceptedAmount(); ok {
		_spec.SetField(bid.FieldAcceptedAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedAcceptedAmount(); ok {
		_spec.AddField(bid.FieldAcceptedAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bid.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BidUpdateOne is the builder for updating a single Bid entity.
type BidUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BidMutation
}

// SetStatus sets the "status" field.
func (buo *BidUpdateOne) SetStatus(b bid.Status) *BidUpdateOne {
	buo.mutation.SetStatus(b)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BidUpdateOne) SetNillableStatus(b *bid.Status) *BidUpdateOne {
	if b != nil {
		buo.SetStatus(*b)
	}
	return buo
}

// SetAmount sets the "amount" field.
func (buo *BidUpdateOne) SetAmount(f float64) *BidUpdateOne {
	buo.mutation.ResetAmount()
	buo.mutation.SetAmount(f)
	return buo
}

// AddAmount adds f to the "amount" field.
func (buo *BidUpdateOne) AddAmount(f float64) *BidUpdateOne {
	buo.mutation.AddAmount(f)
	return buo
}

// SetAcceptedAmount sets the "accepted_amount" field.
func (buo *BidUpdateOne) SetAcceptedAmount(f float64) *BidUpdateOne {
	buo.mutation.ResetAcceptedAmount()
	buo.mutation.SetAcceptedAmount(f)
	return buo
}

// SetNillableAcceptedAmount sets the "accepted_amount" field if the given value is not nil.
func (buo *BidUpdateOne) SetNillableAcceptedAmount(f *float64) *BidUpdateOne {
	if f != nil {
		buo.SetAcceptedAmount(*f)
	}
	return buo
}

// AddAcceptedAmount adds f to the "accepted_amount" field.
func (buo *BidUpdateOne) AddAcceptedAmount(f float64) *BidUpdateOne {
	buo.mutation.AddAcceptedAmount(f)
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BidUpdateOne) SetUpdatedAt(t time.Time) *BidUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// Mutation returns the BidMutation object of the builder.
func (buo *BidUpdateOne) Mutation() *BidMutation {
	return buo.mutation
}

// Where appends a list predicates to the BidUpdate builder.
func (buo *BidUpdateOne) Where(ps ...predicate.Bid) *BidUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BidUpdateOne) Select(field string, fields ...string) *BidUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bid entity.
func (buo *BidUpdateOne) Save(ctx context.Context) (*Bid, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BidUpdateOne) SaveX(ctx context.Context) *Bid {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BidUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BidUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BidUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := bid.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BidUpdateOne) check() error {
	if v, ok := buo.mutation.Status(); ok {
		if err := bid.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bid.status": %w`, err)}
		}
	}
	if _, ok := buo.mutation.InvoiceID(); buo.mutation.InvoiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Bid.invoice"`)
	}
	if _, ok := buo.mutation.InvestorID(); buo.mutation.InvestorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Bid.investor"`)
	}
	return nil
}

func (buo *BidUpdateOne) sqlSave(ctx context.Context) (_node *Bid, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bid.Table, bid.Columns, sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bid.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bid.FieldID)
		for _, f := range fields {
			if !bid.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(bid.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.Amount(); ok {
		_spec.SetField(bid.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedAmount(); ok {
		_spec.AddField(bid.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AcceptedAmount(); ok {
		_spec.SetField(bid.FieldAcceptedAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedAcceptedAmount(); ok {
		_spec.AddField(bid.FieldAcceptedAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bid.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Bid{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
