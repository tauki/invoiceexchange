// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/balance"
	"github.com/tauki/invoiceexchange/ent/bid"
	"github.com/tauki/invoiceexchange/ent/investor"
	"github.com/tauki/invoiceexchange/ent/invoice"
	"github.com/tauki/invoiceexchange/ent/predicate"
)

// InvestorUpdate is the builder for updating Investor entities.
type InvestorUpdate struct {
	config
	hooks    []Hook
	mutation *InvestorMutation
}

// Where appends a list predicates to the InvestorUpdate builder.
func (iu *InvestorUpdate) Where(ps ...predicate.Investor) *InvestorUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *InvestorUpdate) SetName(s string) *InvestorUpdate {
	iu.mutation.SetName(s)
	return iu
}

// AddBidIDs adds the "bids" edge to the Bid entity by IDs.
func (iu *InvestorUpdate) AddBidIDs(ids ...uuid.UUID) *InvestorUpdate {
	iu.mutation.AddBidIDs(ids...)
	return iu
}

// AddBids adds the "bids" edges to the Bid entity.
func (iu *InvestorUpdate) AddBids(b ...*Bid) *InvestorUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.AddBidIDs(ids...)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (iu *InvestorUpdate) AddInvoiceIDs(ids ...uuid.UUID) *InvestorUpdate {
	iu.mutation.AddInvoiceIDs(ids...)
	return iu
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (iu *InvestorUpdate) AddInvoices(i ...*Invoice) *InvestorUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddInvoiceIDs(ids...)
}

// SetBalanceID sets the "balance" edge to the Balance entity by ID.
func (iu *InvestorUpdate) SetBalanceID(id uuid.UUID) *InvestorUpdate {
	iu.mutation.SetBalanceID(id)
	return iu
}

// SetBalance sets the "balance" edge to the Balance entity.
func (iu *InvestorUpdate) SetBalance(b *Balance) *InvestorUpdate {
	return iu.SetBalanceID(b.ID)
}

// Mutation returns the InvestorMutation object of the builder.
func (iu *InvestorUpdate) Mutation() *InvestorMutation {
	return iu.mutation
}

// ClearBids clears all "bids" edges to the Bid entity.
func (iu *InvestorUpdate) ClearBids() *InvestorUpdate {
	iu.mutation.ClearBids()
	return iu
}

// RemoveBidIDs removes the "bids" edge to Bid entities by IDs.
func (iu *InvestorUpdate) RemoveBidIDs(ids ...uuid.UUID) *InvestorUpdate {
	iu.mutation.RemoveBidIDs(ids...)
	return iu
}

// RemoveBids removes "bids" edges to Bid entities.
func (iu *InvestorUpdate) RemoveBids(b ...*Bid) *InvestorUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.RemoveBidIDs(ids...)
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (iu *InvestorUpdate) ClearInvoices() *InvestorUpdate {
	iu.mutation.ClearInvoices()
	return iu
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (iu *InvestorUpdate) RemoveInvoiceIDs(ids ...uuid.UUID) *InvestorUpdate {
	iu.mutation.RemoveInvoiceIDs(ids...)
	return iu
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (iu *InvestorUpdate) RemoveInvoices(i ...*Invoice) *InvestorUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveInvoiceIDs(ids...)
}

// ClearBalance clears the "balance" edge to the Balance entity.
func (iu *InvestorUpdate) ClearBalance() *InvestorUpdate {
	iu.mutation.ClearBalance()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvestorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvestorUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvestorUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvestorUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InvestorUpdate) check() error {
	if _, ok := iu.mutation.BalanceID(); iu.mutation.BalanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Investor.balance"`)
	}
	return nil
}

func (iu *InvestorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(investor.Table, investor.Columns, sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(investor.FieldName, field.TypeString, value)
	}
	if iu.mutation.BidsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investor.BidsTable,
			Columns: []string{investor.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedBidsIDs(); len(nodes) > 0 && !iu.mutation.BidsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investor.BidsTable,
			Columns: []string{investor.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BidsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investor.BidsTable,
			Columns: []string{investor.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   investor.InvoicesTable,
			Columns: investor.InvoicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !iu.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   investor.InvoicesTable,
			Columns: investor.InvoicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   investor.InvoicesTable,
			Columns: investor.InvoicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.BalanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   investor.BalanceTable,
			Columns: []string{investor.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BalanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   investor.BalanceTable,
			Columns: []string{investor.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvestorUpdateOne is the builder for updating a single Investor entity.
type InvestorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvestorMutation
}

// SetName sets the "name" field.
func (iuo *InvestorUpdateOne) SetName(s string) *InvestorUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// AddBidIDs adds the "bids" edge to the Bid entity by IDs.
func (iuo *InvestorUpdateOne) AddBidIDs(ids ...uuid.UUID) *InvestorUpdateOne {
	iuo.mutation.AddBidIDs(ids...)
	return iuo
}

// AddBids adds the "bids" edges to the Bid entity.
func (iuo *InvestorUpdateOne) AddBids(b ...*Bid) *InvestorUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.AddBidIDs(ids...)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (iuo *InvestorUpdateOne) AddInvoiceIDs(ids ...uuid.UUID) *InvestorUpdateOne {
	iuo.mutation.AddInvoiceIDs(ids...)
	return iuo
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (iuo *InvestorUpdateOne) AddInvoices(i ...*Invoice) *InvestorUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddInvoiceIDs(ids...)
}

// SetBalanceID sets the "balance" edge to the Balance entity by ID.
func (iuo *InvestorUpdateOne) SetBalanceID(id uuid.UUID) *InvestorUpdateOne {
	iuo.mutation.SetBalanceID(id)
	return iuo
}

// SetBalance sets the "balance" edge to the Balance entity.
func (iuo *InvestorUpdateOne) SetBalance(b *Balance) *InvestorUpdateOne {
	return iuo.SetBalanceID(b.ID)
}

// Mutation returns the InvestorMutation object of the builder.
func (iuo *InvestorUpdateOne) Mutation() *InvestorMutation {
	return iuo.mutation
}

// ClearBids clears all "bids" edges to the Bid entity.
func (iuo *InvestorUpdateOne) ClearBids() *InvestorUpdateOne {
	iuo.mutation.ClearBids()
	return iuo
}

// RemoveBidIDs removes the "bids" edge to Bid entities by IDs.
func (iuo *InvestorUpdateOne) RemoveBidIDs(ids ...uuid.UUID) *InvestorUpdateOne {
	iuo.mutation.RemoveBidIDs(ids...)
	return iuo
}

// RemoveBids removes "bids" edges to Bid entities.
func (iuo *InvestorUpdateOne) RemoveBids(b ...*Bid) *InvestorUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.RemoveBidIDs(ids...)
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (iuo *InvestorUpdateOne) ClearInvoices() *InvestorUpdateOne {
	iuo.mutation.ClearInvoices()
	return iuo
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (iuo *InvestorUpdateOne) RemoveInvoiceIDs(ids ...uuid.UUID) *InvestorUpdateOne {
	iuo.mutation.RemoveInvoiceIDs(ids...)
	return iuo
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (iuo *InvestorUpdateOne) RemoveInvoices(i ...*Invoice) *InvestorUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveInvoiceIDs(ids...)
}

// ClearBalance clears the "balance" edge to the Balance entity.
func (iuo *InvestorUpdateOne) ClearBalance() *InvestorUpdateOne {
	iuo.mutation.ClearBalance()
	return iuo
}

// Where appends a list predicates to the InvestorUpdate builder.
func (iuo *InvestorUpdateOne) Where(ps ...predicate.Investor) *InvestorUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvestorUpdateOne) Select(field string, fields ...string) *InvestorUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Investor entity.
func (iuo *InvestorUpdateOne) Save(ctx context.Context) (*Investor, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvestorUpdateOne) SaveX(ctx context.Context) *Investor {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvestorUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvestorUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InvestorUpdateOne) check() error {
	if _, ok := iuo.mutation.BalanceID(); iuo.mutation.BalanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Investor.balance"`)
	}
	return nil
}

func (iuo *InvestorUpdateOne) sqlSave(ctx context.Context) (_node *Investor, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(investor.Table, investor.Columns, sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Investor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, investor.FieldID)
		for _, f := range fields {
			if !investor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != investor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(investor.FieldName, field.TypeString, value)
	}
	if iuo.mutation.BidsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investor.BidsTable,
			Columns: []string{investor.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedBidsIDs(); len(nodes) > 0 && !iuo.mutation.BidsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investor.BidsTable,
			Columns: []string{investor.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BidsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investor.BidsTable,
			Columns: []string{investor.BidsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   investor.InvoicesTable,
			Columns: investor.InvoicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !iuo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   investor.InvoicesTable,
			Columns: investor.InvoicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   investor.InvoicesTable,
			Columns: investor.InvoicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.BalanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   investor.BalanceTable,
			Columns: []string{investor.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BalanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   investor.BalanceTable,
			Columns: []string{investor.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Investor{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
