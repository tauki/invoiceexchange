// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the invoice type in the database.
	Label = "invoice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAskingPrice holds the string denoting the asking_price field in the database.
	FieldAskingPrice = "asking_price"
	// FieldIsLocked holds the string denoting the is_locked field in the database.
	FieldIsLocked = "is_locked"
	// FieldIsApproved holds the string denoting the is_approved field in the database.
	FieldIsApproved = "is_approved"
	// FieldInvoiceNumber holds the string denoting the invoice_number field in the database.
	FieldInvoiceNumber = "invoice_number"
	// FieldInvoiceDate holds the string denoting the invoice_date field in the database.
	FieldInvoiceDate = "invoice_date"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldAmountDue holds the string denoting the amount_due field in the database.
	FieldAmountDue = "amount_due"
	// FieldCustomerName holds the string denoting the customer_name field in the database.
	FieldCustomerName = "customer_name"
	// FieldReference holds the string denoting the reference field in the database.
	FieldReference = "reference"
	// FieldCompanyName holds the string denoting the company_name field in the database.
	FieldCompanyName = "company_name"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldTotalVat holds the string denoting the total_vat field in the database.
	FieldTotalVat = "total_vat"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeBids holds the string denoting the bids edge name in mutations.
	EdgeBids = "bids"
	// EdgeIssuer holds the string denoting the issuer edge name in mutations.
	EdgeIssuer = "issuer"
	// EdgeInvestor holds the string denoting the investor edge name in mutations.
	EdgeInvestor = "investor"
	// Table holds the table name of the invoice in the database.
	Table = "invoices"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "invoice_items"
	// ItemsInverseTable is the table name for the InvoiceItem entity.
	// It exists in this package in order to avoid circular dependency with the "invoiceitem" package.
	ItemsInverseTable = "invoice_items"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "invoice_items"
	// BidsTable is the table that holds the bids relation/edge.
	BidsTable = "bids"
	// BidsInverseTable is the table name for the Bid entity.
	// It exists in this package in order to avoid circular dependency with the "bid" package.
	BidsInverseTable = "bids"
	// BidsColumn is the table column denoting the bids relation/edge.
	BidsColumn = "invoice_bids"
	// IssuerTable is the table that holds the issuer relation/edge.
	IssuerTable = "invoices"
	// IssuerInverseTable is the table name for the Issuer entity.
	// It exists in this package in order to avoid circular dependency with the "issuer" package.
	IssuerInverseTable = "issuers"
	// IssuerColumn is the table column denoting the issuer relation/edge.
	IssuerColumn = "issuer_invoices"
	// InvestorTable is the table that holds the investor relation/edge. The primary key declared below.
	InvestorTable = "investor_invoices"
	// InvestorInverseTable is the table name for the Investor entity.
	// It exists in this package in order to avoid circular dependency with the "investor" package.
	InvestorInverseTable = "investors"
)

// Columns holds all SQL columns for invoice fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldAskingPrice,
	FieldIsLocked,
	FieldIsApproved,
	FieldInvoiceNumber,
	FieldInvoiceDate,
	FieldDueDate,
	FieldAmountDue,
	FieldCustomerName,
	FieldReference,
	FieldCompanyName,
	FieldCurrency,
	FieldTotalAmount,
	FieldTotalVat,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "invoices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"issuer_invoices",
}

var (
	// InvestorPrimaryKey and InvestorColumn2 are the table columns denoting the
	// primary key for the investor relation (M2M).
	InvestorPrimaryKey = []string{"investor_id", "invoice_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAskingPrice holds the default value on creation for the "asking_price" field.
	DefaultAskingPrice float64
	// DefaultIsLocked holds the default value on creation for the "is_locked" field.
	DefaultIsLocked bool
	// DefaultIsApproved holds the default value on creation for the "is_approved" field.
	DefaultIsApproved bool
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultTotalAmount holds the default value on creation for the "total_amount" field.
	DefaultTotalAmount float64
	// DefaultTotalVat holds the default value on creation for the "total_vat" field.
	DefaultTotalVat float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending   Status = "pending"
	StatusProcessed Status = "processed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusProcessed:
		return nil
	default:
		return fmt.Errorf("invoice: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Invoice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAskingPrice orders the results by the asking_price field.
func ByAskingPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAskingPrice, opts...).ToFunc()
}

// ByIsLocked orders the results by the is_locked field.
func ByIsLocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLocked, opts...).ToFunc()
}

// ByIsApproved orders the results by the is_approved field.
func ByIsApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsApproved, opts...).ToFunc()
}

// ByInvoiceNumber orders the results by the invoice_number field.
func ByInvoiceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceNumber, opts...).ToFunc()
}

// ByInvoiceDate orders the results by the invoice_date field.
func ByInvoiceDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceDate, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByAmountDue orders the results by the amount_due field.
func ByAmountDue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmountDue, opts...).ToFunc()
}

// ByCustomerName orders the results by the customer_name field.
func ByCustomerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerName, opts...).ToFunc()
}

// ByReference orders the results by the reference field.
func ByReference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReference, opts...).ToFunc()
}

// ByCompanyName orders the results by the company_name field.
func ByCompanyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyName, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// ByTotalVat orders the results by the total_vat field.
func ByTotalVat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalVat, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBidsCount orders the results by bids count.
func ByBidsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBidsStep(), opts...)
	}
}

// ByBids orders the results by bids terms.
func ByBids(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBidsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIssuerField orders the results by issuer field.
func ByIssuerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIssuerStep(), sql.OrderByField(field, opts...))
	}
}

// ByInvestorCount orders the results by investor count.
func ByInvestorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvestorStep(), opts...)
	}
}

// ByInvestor orders the results by investor terms.
func ByInvestor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvestorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
	)
}
func newBidsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BidsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BidsTable, BidsColumn),
	)
}
func newIssuerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IssuerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IssuerTable, IssuerColumn),
	)
}
func newInvestorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvestorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InvestorTable, InvestorPrimaryKey...),
	)
}
