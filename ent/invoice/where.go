// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldID, id))
}

// AskingPrice applies equality check predicate on the "asking_price" field. It's identical to AskingPriceEQ.
func AskingPrice(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAskingPrice, v))
}

// IsLocked applies equality check predicate on the "is_locked" field. It's identical to IsLockedEQ.
func IsLocked(v bool) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIsLocked, v))
}

// IsApproved applies equality check predicate on the "is_approved" field. It's identical to IsApprovedEQ.
func IsApproved(v bool) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIsApproved, v))
}

// InvoiceNumber applies equality check predicate on the "invoice_number" field. It's identical to InvoiceNumberEQ.
func InvoiceNumber(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceNumber, v))
}

// InvoiceDate applies equality check predicate on the "invoice_date" field. It's identical to InvoiceDateEQ.
func InvoiceDate(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceDate, v))
}

// DueDate applies equality check predicate on the "due_date" field. It's identical to DueDateEQ.
func DueDate(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDueDate, v))
}

// AmountDue applies equality check predicate on the "amount_due" field. It's identical to AmountDueEQ.
func AmountDue(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmountDue, v))
}

// CustomerName applies equality check predicate on the "customer_name" field. It's identical to CustomerNameEQ.
func CustomerName(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerName, v))
}

// Reference applies equality check predicate on the "reference" field. It's identical to ReferenceEQ.
func Reference(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldReference, v))
}

// CompanyName applies equality check predicate on the "company_name" field. It's identical to CompanyNameEQ.
func CompanyName(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyName, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCurrency, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalVat applies equality check predicate on the "total_vat" field. It's identical to TotalVatEQ.
func TotalVat(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotalVat, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldStatus, vs...))
}

// AskingPriceEQ applies the EQ predicate on the "asking_price" field.
func AskingPriceEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAskingPrice, v))
}

// AskingPriceNEQ applies the NEQ predicate on the "asking_price" field.
func AskingPriceNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldAskingPrice, v))
}

// AskingPriceIn applies the In predicate on the "asking_price" field.
func AskingPriceIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldAskingPrice, vs...))
}

// AskingPriceNotIn applies the NotIn predicate on the "asking_price" field.
func AskingPriceNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldAskingPrice, vs...))
}

// AskingPriceGT applies the GT predicate on the "asking_price" field.
func AskingPriceGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldAskingPrice, v))
}

// AskingPriceGTE applies the GTE predicate on the "asking_price" field.
func AskingPriceGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldAskingPrice, v))
}

// AskingPriceLT applies the LT predicate on the "asking_price" field.
func AskingPriceLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldAskingPrice, v))
}

// AskingPriceLTE applies the LTE predicate on the "asking_price" field.
func AskingPriceLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldAskingPrice, v))
}

// IsLockedEQ applies the EQ predicate on the "is_locked" field.
func IsLockedEQ(v bool) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIsLocked, v))
}

// IsLockedNEQ applies the NEQ predicate on the "is_locked" field.
func IsLockedNEQ(v bool) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldIsLocked, v))
}

// IsApprovedEQ applies the EQ predicate on the "is_approved" field.
func IsApprovedEQ(v bool) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIsApproved, v))
}

// IsApprovedNEQ applies the NEQ predicate on the "is_approved" field.
func IsApprovedNEQ(v bool) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldIsApproved, v))
}

// InvoiceNumberEQ applies the EQ predicate on the "invoice_number" field.
func InvoiceNumberEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceNumber, v))
}

// InvoiceNumberNEQ applies the NEQ predicate on the "invoice_number" field.
func InvoiceNumberNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldInvoiceNumber, v))
}

// InvoiceNumberIn applies the In predicate on the "invoice_number" field.
func InvoiceNumberIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldInvoiceNumber, vs...))
}

// InvoiceNumberNotIn applies the NotIn predicate on the "invoice_number" field.
func InvoiceNumberNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldInvoiceNumber, vs...))
}

// InvoiceNumberGT applies the GT predicate on the "invoice_number" field.
func InvoiceNumberGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldInvoiceNumber, v))
}

// InvoiceNumberGTE applies the GTE predicate on the "invoice_number" field.
func InvoiceNumberGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldInvoiceNumber, v))
}

// InvoiceNumberLT applies the LT predicate on the "invoice_number" field.
func InvoiceNumberLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldInvoiceNumber, v))
}

// InvoiceNumberLTE applies the LTE predicate on the "invoice_number" field.
func InvoiceNumberLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldInvoiceNumber, v))
}

// InvoiceNumberContains applies the Contains predicate on the "invoice_number" field.
func InvoiceNumberContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldInvoiceNumber, v))
}

// InvoiceNumberHasPrefix applies the HasPrefix predicate on the "invoice_number" field.
func InvoiceNumberHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldInvoiceNumber, v))
}

// InvoiceNumberHasSuffix applies the HasSuffix predicate on the "invoice_number" field.
func InvoiceNumberHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldInvoiceNumber, v))
}

// InvoiceNumberEqualFold applies the EqualFold predicate on the "invoice_number" field.
func InvoiceNumberEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldInvoiceNumber, v))
}

// InvoiceNumberContainsFold applies the ContainsFold predicate on the "invoice_number" field.
func InvoiceNumberContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldInvoiceNumber, v))
}

// InvoiceDateEQ applies the EQ predicate on the "invoice_date" field.
func InvoiceDateEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoiceDate, v))
}

// InvoiceDateNEQ applies the NEQ predicate on the "invoice_date" field.
func InvoiceDateNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldInvoiceDate, v))
}

// InvoiceDateIn applies the In predicate on the "invoice_date" field.
func InvoiceDateIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldInvoiceDate, vs...))
}

// InvoiceDateNotIn applies the NotIn predicate on the "invoice_date" field.
func InvoiceDateNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldInvoiceDate, vs...))
}

// InvoiceDateGT applies the GT predicate on the "invoice_date" field.
func InvoiceDateGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldInvoiceDate, v))
}

// InvoiceDateGTE applies the GTE predicate on the "invoice_date" field.
func InvoiceDateGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldInvoiceDate, v))
}

// InvoiceDateLT applies the LT predicate on the "invoice_date" field.
func InvoiceDateLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldInvoiceDate, v))
}

// InvoiceDateLTE applies the LTE predicate on the "invoice_date" field.
func InvoiceDateLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldInvoiceDate, v))
}

// DueDateEQ applies the EQ predicate on the "due_date" field.
func DueDateEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDueDate, v))
}

// DueDateNEQ applies the NEQ predicate on the "due_date" field.
func DueDateNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldDueDate, v))
}

// DueDateIn applies the In predicate on the "due_date" field.
func DueDateIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldDueDate, vs...))
}

// DueDateNotIn applies the NotIn predicate on the "due_date" field.
func DueDateNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldDueDate, vs...))
}

// DueDateGT applies the GT predicate on the "due_date" field.
func DueDateGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldDueDate, v))
}

// DueDateGTE applies the GTE predicate on the "due_date" field.
func DueDateGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldDueDate, v))
}

// DueDateLT applies the LT predicate on the "due_date" field.
func DueDateLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldDueDate, v))
}

// DueDateLTE applies the LTE predicate on the "due_date" field.
func DueDateLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldDueDate, v))
}

// AmountDueEQ applies the EQ predicate on the "amount_due" field.
func AmountDueEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldAmountDue, v))
}

// AmountDueNEQ applies the NEQ predicate on the "amount_due" field.
func AmountDueNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldAmountDue, v))
}

// AmountDueIn applies the In predicate on the "amount_due" field.
func AmountDueIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldAmountDue, vs...))
}

// AmountDueNotIn applies the NotIn predicate on the "amount_due" field.
func AmountDueNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldAmountDue, vs...))
}

// AmountDueGT applies the GT predicate on the "amount_due" field.
func AmountDueGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldAmountDue, v))
}

// AmountDueGTE applies the GTE predicate on the "amount_due" field.
func AmountDueGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldAmountDue, v))
}

// AmountDueLT applies the LT predicate on the "amount_due" field.
func AmountDueLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldAmountDue, v))
}

// AmountDueLTE applies the LTE predicate on the "amount_due" field.
func AmountDueLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldAmountDue, v))
}

// CustomerNameEQ applies the EQ predicate on the "customer_name" field.
func CustomerNameEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCustomerName, v))
}

// CustomerNameNEQ applies the NEQ predicate on the "customer_name" field.
func CustomerNameNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCustomerName, v))
}

// CustomerNameIn applies the In predicate on the "customer_name" field.
func CustomerNameIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCustomerName, vs...))
}

// CustomerNameNotIn applies the NotIn predicate on the "customer_name" field.
func CustomerNameNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCustomerName, vs...))
}

// CustomerNameGT applies the GT predicate on the "customer_name" field.
func CustomerNameGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCustomerName, v))
}

// CustomerNameGTE applies the GTE predicate on the "customer_name" field.
func CustomerNameGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCustomerName, v))
}

// CustomerNameLT applies the LT predicate on the "customer_name" field.
func CustomerNameLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCustomerName, v))
}

// CustomerNameLTE applies the LTE predicate on the "customer_name" field.
func CustomerNameLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCustomerName, v))
}

// CustomerNameContains applies the Contains predicate on the "customer_name" field.
func CustomerNameContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCustomerName, v))
}

// CustomerNameHasPrefix applies the HasPrefix predicate on the "customer_name" field.
func CustomerNameHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCustomerName, v))
}

// CustomerNameHasSuffix applies the HasSuffix predicate on the "customer_name" field.
func CustomerNameHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCustomerName, v))
}

// CustomerNameEqualFold applies the EqualFold predicate on the "customer_name" field.
func CustomerNameEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCustomerName, v))
}

// CustomerNameContainsFold applies the ContainsFold predicate on the "customer_name" field.
func CustomerNameContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCustomerName, v))
}

// ReferenceEQ applies the EQ predicate on the "reference" field.
func ReferenceEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldReference, v))
}

// ReferenceNEQ applies the NEQ predicate on the "reference" field.
func ReferenceNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldReference, v))
}

// ReferenceIn applies the In predicate on the "reference" field.
func ReferenceIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldReference, vs...))
}

// ReferenceNotIn applies the NotIn predicate on the "reference" field.
func ReferenceNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldReference, vs...))
}

// ReferenceGT applies the GT predicate on the "reference" field.
func ReferenceGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldReference, v))
}

// ReferenceGTE applies the GTE predicate on the "reference" field.
func ReferenceGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldReference, v))
}

// ReferenceLT applies the LT predicate on the "reference" field.
func ReferenceLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldReference, v))
}

// ReferenceLTE applies the LTE predicate on the "reference" field.
func ReferenceLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldReference, v))
}

// ReferenceContains applies the Contains predicate on the "reference" field.
func ReferenceContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldReference, v))
}

// ReferenceHasPrefix applies the HasPrefix predicate on the "reference" field.
func ReferenceHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldReference, v))
}

// ReferenceHasSuffix applies the HasSuffix predicate on the "reference" field.
func ReferenceHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldReference, v))
}

// ReferenceIsNil applies the IsNil predicate on the "reference" field.
func ReferenceIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldReference))
}

// ReferenceNotNil applies the NotNil predicate on the "reference" field.
func ReferenceNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldReference))
}

// ReferenceEqualFold applies the EqualFold predicate on the "reference" field.
func ReferenceEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldReference, v))
}

// ReferenceContainsFold applies the ContainsFold predicate on the "reference" field.
func ReferenceContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldReference, v))
}

// CompanyNameEQ applies the EQ predicate on the "company_name" field.
func CompanyNameEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCompanyName, v))
}

// CompanyNameNEQ applies the NEQ predicate on the "company_name" field.
func CompanyNameNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCompanyName, v))
}

// CompanyNameIn applies the In predicate on the "company_name" field.
func CompanyNameIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCompanyName, vs...))
}

// CompanyNameNotIn applies the NotIn predicate on the "company_name" field.
func CompanyNameNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCompanyName, vs...))
}

// CompanyNameGT applies the GT predicate on the "company_name" field.
func CompanyNameGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCompanyName, v))
}

// CompanyNameGTE applies the GTE predicate on the "company_name" field.
func CompanyNameGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCompanyName, v))
}

// CompanyNameLT applies the LT predicate on the "company_name" field.
func CompanyNameLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCompanyName, v))
}

// CompanyNameLTE applies the LTE predicate on the "company_name" field.
func CompanyNameLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCompanyName, v))
}

// CompanyNameContains applies the Contains predicate on the "company_name" field.
func CompanyNameContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCompanyName, v))
}

// CompanyNameHasPrefix applies the HasPrefix predicate on the "company_name" field.
func CompanyNameHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCompanyName, v))
}

// CompanyNameHasSuffix applies the HasSuffix predicate on the "company_name" field.
func CompanyNameHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCompanyName, v))
}

// CompanyNameIsNil applies the IsNil predicate on the "company_name" field.
func CompanyNameIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCompanyName))
}

// CompanyNameNotNil applies the NotNil predicate on the "company_name" field.
func CompanyNameNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCompanyName))
}

// CompanyNameEqualFold applies the EqualFold predicate on the "company_name" field.
func CompanyNameEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCompanyName, v))
}

// CompanyNameContainsFold applies the ContainsFold predicate on the "company_name" field.
func CompanyNameContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCompanyName, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCurrency, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTotalAmount, v))
}

// TotalAmountIsNil applies the IsNil predicate on the "total_amount" field.
func TotalAmountIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldTotalAmount))
}

// TotalAmountNotNil applies the NotNil predicate on the "total_amount" field.
func TotalAmountNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldTotalAmount))
}

// TotalVatEQ applies the EQ predicate on the "total_vat" field.
func TotalVatEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotalVat, v))
}

// TotalVatNEQ applies the NEQ predicate on the "total_vat" field.
func TotalVatNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTotalVat, v))
}

// TotalVatIn applies the In predicate on the "total_vat" field.
func TotalVatIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTotalVat, vs...))
}

// TotalVatNotIn applies the NotIn predicate on the "total_vat" field.
func TotalVatNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTotalVat, vs...))
}

// TotalVatGT applies the GT predicate on the "total_vat" field.
func TotalVatGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTotalVat, v))
}

// TotalVatGTE applies the GTE predicate on the "total_vat" field.
func TotalVatGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTotalVat, v))
}

// TotalVatLT applies the LT predicate on the "total_vat" field.
func TotalVatLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTotalVat, v))
}

// TotalVatLTE applies the LTE predicate on the "total_vat" field.
func TotalVatLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTotalVat, v))
}

// TotalVatIsNil applies the IsNil predicate on the "total_vat" field.
func TotalVatIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldTotalVat))
}

// TotalVatNotNil applies the NotNil predicate on the "total_vat" field.
func TotalVatNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldTotalVat))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCreatedAt, v))
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.InvoiceItem) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBids applies the HasEdge predicate on the "bids" edge.
func HasBids() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BidsTable, BidsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBidsWith applies the HasEdge predicate on the "bids" edge with a given conditions (other predicates).
func HasBidsWith(preds ...predicate.Bid) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newBidsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIssuer applies the HasEdge predicate on the "issuer" edge.
func HasIssuer() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IssuerTable, IssuerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIssuerWith applies the HasEdge predicate on the "issuer" edge with a given conditions (other predicates).
func HasIssuerWith(preds ...predicate.Issuer) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newIssuerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvestor applies the HasEdge predicate on the "investor" edge.
func HasInvestor() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, InvestorTable, InvestorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvestorWith applies the HasEdge predicate on the "investor" edge with a given conditions (other predicates).
func HasInvestorWith(preds ...predicate.Investor) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newInvestorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		p(s.Not())
	})
}
