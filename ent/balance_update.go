// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/balance"
	"github.com/tauki/invoiceexchange/ent/investor"
	"github.com/tauki/invoiceexchange/ent/issuer"
	"github.com/tauki/invoiceexchange/ent/predicate"
)

// BalanceUpdate is the builder for updating Balance entities.
type BalanceUpdate struct {
	config
	hooks    []Hook
	mutation *BalanceMutation
}

// Where appends a list predicates to the BalanceUpdate builder.
func (bu *BalanceUpdate) Where(ps ...predicate.Balance) *BalanceUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetTotalAmount sets the "total_amount" field.
func (bu *BalanceUpdate) SetTotalAmount(f float64) *BalanceUpdate {
	bu.mutation.ResetTotalAmount()
	bu.mutation.SetTotalAmount(f)
	return bu
}

// AddTotalAmount adds f to the "total_amount" field.
func (bu *BalanceUpdate) AddTotalAmount(f float64) *BalanceUpdate {
	bu.mutation.AddTotalAmount(f)
	return bu
}

// SetAvailableAmount sets the "available_amount" field.
func (bu *BalanceUpdate) SetAvailableAmount(f float64) *BalanceUpdate {
	bu.mutation.ResetAvailableAmount()
	bu.mutation.SetAvailableAmount(f)
	return bu
}

// AddAvailableAmount adds f to the "available_amount" field.
func (bu *BalanceUpdate) AddAvailableAmount(f float64) *BalanceUpdate {
	bu.mutation.AddAvailableAmount(f)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BalanceUpdate) SetUpdatedAt(t time.Time) *BalanceUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// AddInvestorIDs adds the "investor" edge to the Investor entity by IDs.
func (bu *BalanceUpdate) AddInvestorIDs(ids ...uuid.UUID) *BalanceUpdate {
	bu.mutation.AddInvestorIDs(ids...)
	return bu
}

// AddInvestor adds the "investor" edges to the Investor entity.
func (bu *BalanceUpdate) AddInvestor(i ...*Investor) *BalanceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bu.AddInvestorIDs(ids...)
}

// AddIssuerIDs adds the "issuer" edge to the Issuer entity by IDs.
func (bu *BalanceUpdate) AddIssuerIDs(ids ...uuid.UUID) *BalanceUpdate {
	bu.mutation.AddIssuerIDs(ids...)
	return bu
}

// AddIssuer adds the "issuer" edges to the Issuer entity.
func (bu *BalanceUpdate) AddIssuer(i ...*Issuer) *BalanceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bu.AddIssuerIDs(ids...)
}

// Mutation returns the BalanceMutation object of the builder.
func (bu *BalanceUpdate) Mutation() *BalanceMutation {
	return bu.mutation
}

// ClearInvestor clears all "investor" edges to the Investor entity.
func (bu *BalanceUpdate) ClearInvestor() *BalanceUpdate {
	bu.mutation.ClearInvestor()
	return bu
}

// RemoveInvestorIDs removes the "investor" edge to Investor entities by IDs.
func (bu *BalanceUpdate) RemoveInvestorIDs(ids ...uuid.UUID) *BalanceUpdate {
	bu.mutation.RemoveInvestorIDs(ids...)
	return bu
}

// RemoveInvestor removes "investor" edges to Investor entities.
func (bu *BalanceUpdate) RemoveInvestor(i ...*Investor) *BalanceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bu.RemoveInvestorIDs(ids...)
}

// ClearIssuer clears all "issuer" edges to the Issuer entity.
func (bu *BalanceUpdate) ClearIssuer() *BalanceUpdate {
	bu.mutation.ClearIssuer()
	return bu
}

// RemoveIssuerIDs removes the "issuer" edge to Issuer entities by IDs.
func (bu *BalanceUpdate) RemoveIssuerIDs(ids ...uuid.UUID) *BalanceUpdate {
	bu.mutation.RemoveIssuerIDs(ids...)
	return bu
}

// RemoveIssuer removes "issuer" edges to Issuer entities.
func (bu *BalanceUpdate) RemoveIssuer(i ...*Issuer) *BalanceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bu.RemoveIssuerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BalanceUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BalanceUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BalanceUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BalanceUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BalanceUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := balance.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

func (bu *BalanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(balance.Table, balance.Columns, sqlgraph.NewFieldSpec(balance.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.TotalAmount(); ok {
		_spec.SetField(balance.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedTotalAmount(); ok {
		_spec.AddField(balance.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AvailableAmount(); ok {
		_spec.SetField(balance.FieldAvailableAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedAvailableAmount(); ok {
		_spec.AddField(balance.FieldAvailableAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(balance.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.InvestorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.InvestorTable,
			Columns: []string{balance.InvestorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedInvestorIDs(); len(nodes) > 0 && !bu.mutation.InvestorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.InvestorTable,
			Columns: []string{balance.InvestorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.InvestorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.InvestorTable,
			Columns: []string{balance.InvestorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.IssuerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.IssuerTable,
			Columns: []string{balance.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedIssuerIDs(); len(nodes) > 0 && !bu.mutation.IssuerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.IssuerTable,
			Columns: []string{balance.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.IssuerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.IssuerTable,
			Columns: []string{balance.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{balance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BalanceUpdateOne is the builder for updating a single Balance entity.
type BalanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BalanceMutation
}

// SetTotalAmount sets the "total_amount" field.
func (buo *BalanceUpdateOne) SetTotalAmount(f float64) *BalanceUpdateOne {
	buo.mutation.ResetTotalAmount()
	buo.mutation.SetTotalAmount(f)
	return buo
}

// AddTotalAmount adds f to the "total_amount" field.
func (buo *BalanceUpdateOne) AddTotalAmount(f float64) *BalanceUpdateOne {
	buo.mutation.AddTotalAmount(f)
	return buo
}

// SetAvailableAmount sets the "available_amount" field.
func (buo *BalanceUpdateOne) SetAvailableAmount(f float64) *BalanceUpdateOne {
	buo.mutation.ResetAvailableAmount()
	buo.mutation.SetAvailableAmount(f)
	return buo
}

// AddAvailableAmount adds f to the "available_amount" field.
func (buo *BalanceUpdateOne) AddAvailableAmount(f float64) *BalanceUpdateOne {
	buo.mutation.AddAvailableAmount(f)
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BalanceUpdateOne) SetUpdatedAt(t time.Time) *BalanceUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// AddInvestorIDs adds the "investor" edge to the Investor entity by IDs.
func (buo *BalanceUpdateOne) AddInvestorIDs(ids ...uuid.UUID) *BalanceUpdateOne {
	buo.mutation.AddInvestorIDs(ids...)
	return buo
}

// AddInvestor adds the "investor" edges to the Investor entity.
func (buo *BalanceUpdateOne) AddInvestor(i ...*Investor) *BalanceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return buo.AddInvestorIDs(ids...)
}

// AddIssuerIDs adds the "issuer" edge to the Issuer entity by IDs.
func (buo *BalanceUpdateOne) AddIssuerIDs(ids ...uuid.UUID) *BalanceUpdateOne {
	buo.mutation.AddIssuerIDs(ids...)
	return buo
}

// AddIssuer adds the "issuer" edges to the Issuer entity.
func (buo *BalanceUpdateOne) AddIssuer(i ...*Issuer) *BalanceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return buo.AddIssuerIDs(ids...)
}

// Mutation returns the BalanceMutation object of the builder.
func (buo *BalanceUpdateOne) Mutation() *BalanceMutation {
	return buo.mutation
}

// ClearInvestor clears all "investor" edges to the Investor entity.
func (buo *BalanceUpdateOne) ClearInvestor() *BalanceUpdateOne {
	buo.mutation.ClearInvestor()
	return buo
}

// RemoveInvestorIDs removes the "investor" edge to Investor entities by IDs.
func (buo *BalanceUpdateOne) RemoveInvestorIDs(ids ...uuid.UUID) *BalanceUpdateOne {
	buo.mutation.RemoveInvestorIDs(ids...)
	return buo
}

// RemoveInvestor removes "investor" edges to Investor entities.
func (buo *BalanceUpdateOne) RemoveInvestor(i ...*Investor) *BalanceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return buo.RemoveInvestorIDs(ids...)
}

// ClearIssuer clears all "issuer" edges to the Issuer entity.
func (buo *BalanceUpdateOne) ClearIssuer() *BalanceUpdateOne {
	buo.mutation.ClearIssuer()
	return buo
}

// RemoveIssuerIDs removes the "issuer" edge to Issuer entities by IDs.
func (buo *BalanceUpdateOne) RemoveIssuerIDs(ids ...uuid.UUID) *BalanceUpdateOne {
	buo.mutation.RemoveIssuerIDs(ids...)
	return buo
}

// RemoveIssuer removes "issuer" edges to Issuer entities.
func (buo *BalanceUpdateOne) RemoveIssuer(i ...*Issuer) *BalanceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return buo.RemoveIssuerIDs(ids...)
}

// Where appends a list predicates to the BalanceUpdate builder.
func (buo *BalanceUpdateOne) Where(ps ...predicate.Balance) *BalanceUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BalanceUpdateOne) Select(field string, fields ...string) *BalanceUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Balance entity.
func (buo *BalanceUpdateOne) Save(ctx context.Context) (*Balance, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BalanceUpdateOne) SaveX(ctx context.Context) *Balance {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BalanceUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BalanceUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BalanceUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := balance.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

func (buo *BalanceUpdateOne) sqlSave(ctx context.Context) (_node *Balance, err error) {
	_spec := sqlgraph.NewUpdateSpec(balance.Table, balance.Columns, sqlgraph.NewFieldSpec(balance.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Balance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, balance.FieldID)
		for _, f := range fields {
			if !balance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != balance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.TotalAmount(); ok {
		_spec.SetField(balance.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(balance.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AvailableAmount(); ok {
		_spec.SetField(balance.FieldAvailableAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedAvailableAmount(); ok {
		_spec.AddField(balance.FieldAvailableAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(balance.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.InvestorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.InvestorTable,
			Columns: []string{balance.InvestorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedInvestorIDs(); len(nodes) > 0 && !buo.mutation.InvestorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.InvestorTable,
			Columns: []string{balance.InvestorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.InvestorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.InvestorTable,
			Columns: []string{balance.InvestorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(investor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.IssuerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.IssuerTable,
			Columns: []string{balance.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedIssuerIDs(); len(nodes) > 0 && !buo.mutation.IssuerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.IssuerTable,
			Columns: []string{balance.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.IssuerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   balance.IssuerTable,
			Columns: []string{balance.IssuerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Balance{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{balance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
