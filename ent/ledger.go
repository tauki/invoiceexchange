// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/ledger"
)

// Ledger is the model entity for the Ledger schema.
type Ledger struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status ledger.Status `json:"status,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID uuid.UUID `json:"invoice_id,omitempty"`
	// Entity holds the value of the "entity" field.
	Entity ledger.Entity `json:"entity,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID uuid.UUID `json:"entity_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ledger) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ledger.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case ledger.FieldStatus, ledger.FieldEntity:
			values[i] = new(sql.NullString)
		case ledger.FieldCreatedAt, ledger.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ledger.FieldID, ledger.FieldInvoiceID, ledger.FieldEntityID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ledger fields.
func (l *Ledger) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ledger.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case ledger.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				l.Status = ledger.Status(value.String)
			}
		case ledger.FieldInvoiceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value != nil {
				l.InvoiceID = *value
			}
		case ledger.FieldEntity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity", values[i])
			} else if value.Valid {
				l.Entity = ledger.Entity(value.String)
			}
		case ledger.FieldEntityID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value != nil {
				l.EntityID = *value
			}
		case ledger.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				l.Amount = value.Float64
			}
		case ledger.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case ledger.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ledger.
// This includes values selected through modifiers, order, etc.
func (l *Ledger) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// Update returns a builder for updating this Ledger.
// Note that you need to call Ledger.Unwrap() before calling this method if this Ledger
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Ledger) Update() *LedgerUpdateOne {
	return NewLedgerClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Ledger entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Ledger) Unwrap() *Ledger {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ledger is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Ledger) String() string {
	var builder strings.Builder
	builder.WriteString("Ledger(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", l.Status))
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(fmt.Sprintf("%v", l.InvoiceID))
	builder.WriteString(", ")
	builder.WriteString("entity=")
	builder.WriteString(fmt.Sprintf("%v", l.Entity))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", l.EntityID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", l.Amount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Ledgers is a parsable slice of Ledger.
type Ledgers []*Ledger
