// Code generated by ent, DO NOT EDIT.

package invoiceitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tauki/invoiceexchange/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLTE(FieldID, id))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldDescription, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldQuantity, v))
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldUnitPrice, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldAmount, v))
}

// VatRate applies equality check predicate on the "vat_rate" field. It's identical to VatRateEQ.
func VatRate(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldVatRate, v))
}

// VatAmount applies equality check predicate on the "vat_amount" field. It's identical to VatAmountEQ.
func VatAmount(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldVatAmount, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldContainsFold(FieldDescription, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLTE(FieldQuantity, v))
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLTE(FieldUnitPrice, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLTE(FieldAmount, v))
}

// VatRateEQ applies the EQ predicate on the "vat_rate" field.
func VatRateEQ(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldVatRate, v))
}

// VatRateNEQ applies the NEQ predicate on the "vat_rate" field.
func VatRateNEQ(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNEQ(FieldVatRate, v))
}

// VatRateIn applies the In predicate on the "vat_rate" field.
func VatRateIn(vs ...float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldIn(FieldVatRate, vs...))
}

// VatRateNotIn applies the NotIn predicate on the "vat_rate" field.
func VatRateNotIn(vs ...float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNotIn(FieldVatRate, vs...))
}

// VatRateGT applies the GT predicate on the "vat_rate" field.
func VatRateGT(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGT(FieldVatRate, v))
}

// VatRateGTE applies the GTE predicate on the "vat_rate" field.
func VatRateGTE(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGTE(FieldVatRate, v))
}

// VatRateLT applies the LT predicate on the "vat_rate" field.
func VatRateLT(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLT(FieldVatRate, v))
}

// VatRateLTE applies the LTE predicate on the "vat_rate" field.
func VatRateLTE(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLTE(FieldVatRate, v))
}

// VatAmountEQ applies the EQ predicate on the "vat_amount" field.
func VatAmountEQ(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldEQ(FieldVatAmount, v))
}

// VatAmountNEQ applies the NEQ predicate on the "vat_amount" field.
func VatAmountNEQ(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNEQ(FieldVatAmount, v))
}

// VatAmountIn applies the In predicate on the "vat_amount" field.
func VatAmountIn(vs ...float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldIn(FieldVatAmount, vs...))
}

// VatAmountNotIn applies the NotIn predicate on the "vat_amount" field.
func VatAmountNotIn(vs ...float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldNotIn(FieldVatAmount, vs...))
}

// VatAmountGT applies the GT predicate on the "vat_amount" field.
func VatAmountGT(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGT(FieldVatAmount, v))
}

// VatAmountGTE applies the GTE predicate on the "vat_amount" field.
func VatAmountGTE(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldGTE(FieldVatAmount, v))
}

// VatAmountLT applies the LT predicate on the "vat_amount" field.
func VatAmountLT(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLT(FieldVatAmount, v))
}

// VatAmountLTE applies the LTE predicate on the "vat_amount" field.
func VatAmountLTE(v float64) predicate.InvoiceItem {
	return predicate.InvoiceItem(sql.FieldLTE(FieldVatAmount, v))
}

// HasInvoice applies the HasEdge predicate on the "invoice" edge.
func HasInvoice() predicate.InvoiceItem {
	return predicate.InvoiceItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InvoiceTable, InvoiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvoiceWith applies the HasEdge predicate on the "invoice" edge with a given conditions (other predicates).
func HasInvoiceWith(preds ...predicate.Invoice) predicate.InvoiceItem {
	return predicate.InvoiceItem(func(s *sql.Selector) {
		step := newInvoiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InvoiceItem) predicate.InvoiceItem {
	return predicate.InvoiceItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InvoiceItem) predicate.InvoiceItem {
	return predicate.InvoiceItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InvoiceItem) predicate.InvoiceItem {
	return predicate.InvoiceItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
